
ifndef platform
$(info platform is not set!!!Example:export platform=linuxuser)
$(info use default platform setting(linuxuser) instead)
platform = linuxuser
endif

ifeq ($(platform),no-os)
# Grab from setup file
# Define the location of this library
SPINN_DIRS=$(TOP)/portinginterface/spinnaker_tools-master

# Define the version of this library
SPINN_VERSION=131

#TO DO....
#include $(SPINN_DIRS)/Makefile

# Configuration options
# Platform independant setting

# Set to 1 for GNU tools, 0 for ARM

GNU := 1

# Set to 1 if using SARK/API (0 for SARK)

API := 1

# Set to 1 to make Thumb code (0 for ARM)

THUMB := 0

# Prefix for GNU tool binaries

GP  := arm-none-eabi

# Set to 1 if making a library (advanced!)

LIB := 0

LIB_DIR := $(SPINN_DIRS)/lib

INC_DIR := $(SPINN_DIRS)/include

TOOLS_DIR := $(SPINN_DIRS)/tools

STATICLINK := 1

CFLAGSNOPIC := -c -g

#-------------------------------------------------------------------------------

# Set up the various compile/link options for GNU and ARM tools

# GNU tool setup

ifeq ($(GNU),1)
  AS := $(GP)-as --defsym GNU=1 -mthumb-interwork -march=armv5te

#  CA := $(GP)-gcc -c -Os -mthumb-interwork -march=armv5te -std=gnu99 \
#	-I $(INC_DIR)

   CA := $(GP)-gcc -Os -mthumb-interwork -march=armv5te -std=gnu99

  CT := $(CA) -mthumb -DTHUMB

ifeq ($(LIB),1)
  CFLAGS += -fdata-sections -ffunction-sections
endif

ifeq ($(API),1)
#  LIBRARY := -L$(LIB_DIR) -lspin1_api
  LIBRARY += $(LIB_DIR)/libspin1_api.a
else
#  LIBRARY := -L$(LIB_DIR) -lsark
  LIBRARY += $(LIB_DIR)/libsark.a
endif
	
  SCRIPT := $(LIB_DIR)/sark.lnk

  LD := $(GP)-gcc -T$(SCRIPT) -Wl,-e,cpu_reset -Wl,--gc-sections -Wl,--use-blx 

  AR := $(GP)-ar -rcs
  OC := $(GP)-objcopy
  OD := $(GP)-objdump -dxt > $(APP).txt

# ARM tool setup

else
  AS := armasm --keep --cpu=5te --apcs /interwork

#  CA := armcc -c --c99 --cpu=5te --apcs /interwork --min_array_alignment=4 \
#	-I $(INC_DIR)

# remove -c 
  CA := armcc --c99 --cpu=5te --apcs /interwork --min_array_alignment=4

  CT := $(CA) --thumb -DTHUMB

ifeq ($(LIB),1)
  CFLAGS += --split_sections
endif

#ifeq ($(API),1)
#  LIBRARY += $(LIB_DIR)/spin1_api.a
#else
#  LIBRARY += $(LIB_DIR)/sark.a
#endif

  SCRIPT := $(LIB_DIR)/sark.sct

  LD := armlink --scatter=$(SCRIPT) --remove --entry cpu_reset

  AR := armar -rcs
  OC := fromelf
  OD := fromelf -cds --output $(APP).txt

endif

ifeq ($(THUMB),1)
  CC := $(CT)
else
  CC := $(CA)
endif

CAT := cat
RM  := rm -f
LS  := ls -l

CC = $(CA)

# Don't set LD since it is set previously
#LD =

#Might not need in this platform
#TO DO
#CFLAGS += -c -fPIC -g -Wall

ifeq ($(STATICLINK),1)
CFLAGS += -c -g
else
CFLAGS += -c -fPIC -g
endif

#LDFLAGS -shared is empty in this platform
LDFLAGS = -shared

#TO DO
COUPUTFLAG = -o

DEBUGFLAGS  = -O0 -D _DEBUG

RELEASEFLAGS = -O2 -D NDEBUG -combine -fwhole-program

LibTarget = libdes_no_os.so

else ifeq ($(platform),linuxuser)

CC = gcc

LD = gcc

CFLAGS += -c -fPIC -g -Wall

COUPUTFLAG = -o

DEBUGFLAGS  = -O0 -D _DEBUG

RELEASEFLAGS = -O2 -D NDEBUG -combine -fwhole-program

LDFLAGS = -shared

LibTarget = libdes.so
else
endif


# define any directories containing header files other than /usr/include
#

INCLUDES = -I$(TOP)/basemodules/stdTypes/$(platform)/include \
	-I$(TOP)/basemodules/stdWrapper/$(platform)/include \
	-I$(TOP)/commonutils/Dlinklist/$(platform)/include \
	-I$(TOP)/commonutils/Queue/$(platform)/include \
	-I$(TOP)/commonutils/Timer/$(platform)/include \
	-I$(TOP)/syslib/Ojbect/$(platform)/include \
	-I$(TOP)/syslib/Event/$(platform)/include \
	-I$(TOP)/syslib/Scheduler/$(platform)/include \
	-I$(TOP)/portinginterface/spinnaker_tools-master/include

export INCLUDES

# define the C source files

SRCS = $(TOP)/basemodules/stdWrapper/$(platform)/src/stdWrapperApi.c \
	$(TOP)/commonutils/Timer/$(platform)/src/timer.c \
	$(TOP)/syslib/Ojbect/$(platform)/src/Object.c \
	$(TOP)/syslib/Event/$(platform)/src/Event.c \
	$(TOP)/syslib/Scheduler/$(platform)/src/Scheduler_Priv.c \
	$(TOP)/syslib/Scheduler/$(platform)/src/Scheduler.c

# define the C object files 
#
# This uses Suffix Replacement within a macro:
#   $(name:string1=string2)
# For each word in 'name' replace 'string1' with 'string2'
# Below we are replacing the suffix .c of all words in the macro SRCS
# with the .o suffix
#
OBJFILES = $(SRCS:.c=.o)
OBJFILENAMES = $(notdir $(OBJFILES))
OBJFILENAMESPATH = $(patsubst %,$(TOP)/bin/$(platform)/obj/%,$(OBJFILENAMES))

