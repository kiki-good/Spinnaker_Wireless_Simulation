
/home/jmqiao/Desktop/Update_Spinake_Project/Test_Case/Design_v1.0/example/apps/car_washer/no-os/car_washer_test.elf:     file format elf32-littlearm
/home/jmqiao/Desktop/Update_Spinake_Project/Test_Case/Design_v1.0/example/apps/car_washer/no-os/car_washer_test.elf
architecture: armv5te, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x00001e55 memsz 0x00001e55 flags r-x
    LOAD off    0x00010000 vaddr 0x00400000 paddr 0x00400000 align 2**15
         filesz 0x00000004 memsz 0x000006ac flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 RO_DATA       00001e55  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 RW_DATA       00000004  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 ZI_DATA       000006a8  00400004  00400004  00010004  2**2
                  ALLOC
  3 .debug_info   000049c6  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000f07  00000000  00000000  000149ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_loc    0000090d  00000000  00000000  000158d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000f8  00000000  00000000  000161de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015f4  00000000  00000000  000162d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000fec  00000000  00000000  000178ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000030  00000000  00000000  000188b6  2**0
                  CONTENTS, READONLY
 10 .ARM.attributes 00000027  00000000  00000000  000188e6  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000003a4  00000000  00000000  00018910  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  RO_DATA	00000000 RO_DATA
00400000 l    d  RW_DATA	00000000 RW_DATA
00400004 l    d  ZI_DATA	00000000 ZI_DATA
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libsark.o
00000001 l       *ABS*	00000000 GNU
00000000 l       *ABS*	00000000 NULL
80000000 l       *ABS*	00000000 BIT_31
00000001 l       *ABS*	00000000 BUF_WRITE
00000012 l       *ABS*	00000000 NUM_CPUS
00000006 l       *ABS*	00000000 NUM_LINKS
00000000 l       *ABS*	00000000 ITCM_BASE
00008000 l       *ABS*	00000000 ITCM_SIZE
00008000 l       *ABS*	00000000 ITCM_TOP
00400000 l       *ABS*	00000000 DTCM_BASE
00010000 l       *ABS*	00000000 DTCM_SIZE
00410000 l       *ABS*	00000000 DTCM_TOP
70000000 l       *ABS*	00000000 SDRAM_BASE_UNBUF
60000000 l       *ABS*	00000000 SDRAM_BASE_BUF
60000000 l       *ABS*	00000000 SDRAM_BASE
08000000 l       *ABS*	00000000 SDRAM_SIZE
68000000 l       *ABS*	00000000 SDRAM_TOP
f5000000 l       *ABS*	00000000 SYSRAM_BASE_UNBUF
e5000000 l       *ABS*	00000000 SYSRAM_BASE_BUF
e5000000 l       *ABS*	00000000 SYSRAM_BASE
00008000 l       *ABS*	00000000 SYSRAM_SIZE
e5008000 l       *ABS*	00000000 SYSRAM_TOP
f6000000 l       *ABS*	00000000 ROM_BASE
00008000 l       *ABS*	00000000 ROM_SIZE
f6008000 l       *ABS*	00000000 ROM_TOP
10000000 l       *ABS*	00000000 CC_BASE_UNBUF
20000000 l       *ABS*	00000000 CC_BASE_BUF
20000000 l       *ABS*	00000000 CC_BASE
00000000 l       *ABS*	00000000 CC_TCR
00000004 l       *ABS*	00000000 CC_TXDATA
00000008 l       *ABS*	00000000 CC_TXKEY
0000000c l       *ABS*	00000000 CC_RSR
00000010 l       *ABS*	00000000 CC_RXDATA
00000014 l       *ABS*	00000000 CC_RXKEY
00000018 l       *ABS*	00000000 CC_SAR
0000001c l       *ABS*	00000000 CC_TEST
11000000 l       *ABS*	00000000 TIMER_BASE_UNBUF
21000000 l       *ABS*	00000000 TIMER_BASE_BUF
21000000 l       *ABS*	00000000 TIMER_BASE
00000020 l       *ABS*	00000000 TIMER_OFFSET
21000000 l       *ABS*	00000000 TIMER1_BASE
21000020 l       *ABS*	00000000 TIMER2_BASE
00000000 l       *ABS*	00000000 TC_LOAD
00000004 l       *ABS*	00000000 TC_COUNT
00000008 l       *ABS*	00000000 TC_CONTROL
0000000c l       *ABS*	00000000 TC_INT_CLR
00000010 l       *ABS*	00000000 TC_RAW_INT
00000014 l       *ABS*	00000000 TC_MASK_INT
00000018 l       *ABS*	00000000 TC_BG_LOAD
00000000 l       *ABS*	00000000 T1_LOAD
00000004 l       *ABS*	00000000 T1_COUNT
00000008 l       *ABS*	00000000 T1_CONTROL
0000000c l       *ABS*	00000000 T1_INT_CLR
00000010 l       *ABS*	00000000 T1_RAW_INT
00000014 l       *ABS*	00000000 T1_MASK_INT
00000018 l       *ABS*	00000000 T1_BG_LOAD
00000020 l       *ABS*	00000000 T2_LOAD
00000024 l       *ABS*	00000000 T2_COUNT
00000028 l       *ABS*	00000000 T2_CONTROL
0000002c l       *ABS*	00000000 T2_INT_CLR
00000030 l       *ABS*	00000000 T2_RAW_INT
00000034 l       *ABS*	00000000 T2_MASK_INT
00000038 l       *ABS*	00000000 T2_BG_LOAD
1f000000 l       *ABS*	00000000 VIC_BASE_UNBUF
2f000000 l       *ABS*	00000000 VIC_BASE_BUF
2f000000 l       *ABS*	00000000 VIC_BASE
00000000 l       *ABS*	00000000 VIC_IRQST
00000004 l       *ABS*	00000000 VIC_FIQST
00000008 l       *ABS*	00000000 VIC_RAW
0000000c l       *ABS*	00000000 VIC_SELECT
00000010 l       *ABS*	00000000 VIC_ENABLE
00000014 l       *ABS*	00000000 VIC_DISABLE
00000018 l       *ABS*	00000000 VIC_SOFT_SET
0000001c l       *ABS*	00000000 VIC_SOFT_CLR
00000020 l       *ABS*	00000000 VIC_PROTECT
00000030 l       *ABS*	00000000 VIC_VADDR
00000034 l       *ABS*	00000000 VIC_DEFADDR
00000100 l       *ABS*	00000000 VIC_ADDR
00000100 l       *ABS*	00000000 VIC_ADDR0
00000104 l       *ABS*	00000000 VIC_ADDR1
00000108 l       *ABS*	00000000 VIC_ADDR2
0000010c l       *ABS*	00000000 VIC_ADDR3
00000110 l       *ABS*	00000000 VIC_ADDR4
00000114 l       *ABS*	00000000 VIC_ADDR5
00000118 l       *ABS*	00000000 VIC_ADDR6
0000011c l       *ABS*	00000000 VIC_ADDR7
00000120 l       *ABS*	00000000 VIC_ADDR8
00000124 l       *ABS*	00000000 VIC_ADDR9
00000128 l       *ABS*	00000000 VIC_ADDR10
0000012c l       *ABS*	00000000 VIC_ADDR11
00000130 l       *ABS*	00000000 VIC_ADDR12
00000134 l       *ABS*	00000000 VIC_ADDR13
00000138 l       *ABS*	00000000 VIC_ADDR14
0000013c l       *ABS*	00000000 VIC_ADDR15
00000200 l       *ABS*	00000000 VIC_CNTL
00000200 l       *ABS*	00000000 VIC_CNTL0
00000204 l       *ABS*	00000000 VIC_CNTL1
00000208 l       *ABS*	00000000 VIC_CNTL2
0000020c l       *ABS*	00000000 VIC_CNTL3
00000210 l       *ABS*	00000000 VIC_CNTL4
00000214 l       *ABS*	00000000 VIC_CNTL5
00000218 l       *ABS*	00000000 VIC_CNTL6
0000021c l       *ABS*	00000000 VIC_CNTL7
00000220 l       *ABS*	00000000 VIC_CNTL8
00000224 l       *ABS*	00000000 VIC_CNTL9
00000228 l       *ABS*	00000000 VIC_CNTL10
0000022c l       *ABS*	00000000 VIC_CNTL11
00000230 l       *ABS*	00000000 VIC_CNTL12
00000234 l       *ABS*	00000000 VIC_CNTL13
00000238 l       *ABS*	00000000 VIC_CNTL14
0000023c l       *ABS*	00000000 VIC_CNTL15
00000000 l       *ABS*	00000000 WDOG_INT
00000001 l       *ABS*	00000000 SOFTWARE_INT
00000002 l       *ABS*	00000000 COMM_RX_INT
00000003 l       *ABS*	00000000 COMM_TX_INT
00000004 l       *ABS*	00000000 TIMER1_INT
00000005 l       *ABS*	00000000 TIMER2_INT
00000006 l       *ABS*	00000000 CC_RDY_INT
00000007 l       *ABS*	00000000 CC_RPE_INT
00000008 l       *ABS*	00000000 CC_RFE_INT
00000009 l       *ABS*	00000000 CC_TFL_INT
0000000a l       *ABS*	00000000 CC_TOV_INT
0000000b l       *ABS*	00000000 CC_TMT_INT
0000000c l       *ABS*	00000000 DMA_DONE_INT
0000000d l       *ABS*	00000000 DMA_ERR_INT
0000000e l       *ABS*	00000000 DMA_TO_INT
0000000f l       *ABS*	00000000 RTR_DIAG_INT
00000010 l       *ABS*	00000000 RTR_DUMP_INT
00000011 l       *ABS*	00000000 RTR_ERR_INT
00000012 l       *ABS*	00000000 CPU_INT
00000013 l       *ABS*	00000000 ETH_TX_INT
00000014 l       *ABS*	00000000 ETH_RX_INT
00000015 l       *ABS*	00000000 ETH_PHY_INT
00000016 l       *ABS*	00000000 SLOW_CLK_INT
00000017 l       *ABS*	00000000 CC_TNF_INT
00000018 l       *ABS*	00000000 CC_MC_INT
00000019 l       *ABS*	00000000 CC_P2P_INT
0000001a l       *ABS*	00000000 CC_NN_INT
0000001b l       *ABS*	00000000 CC_FR_INT
0000001c l       *ABS*	00000000 INT0_INT
0000001d l       *ABS*	00000000 INT1_INT
0000001e l       *ABS*	00000000 GPIO8_INT
0000001f l       *ABS*	00000000 GPIO9_INT
30000000 l       *ABS*	00000000 DMA_BASE_UNBUF
40000000 l       *ABS*	00000000 DMA_BASE_BUF
40000000 l       *ABS*	00000000 DMA_BASE
00000004 l       *ABS*	00000000 DMA_ADRS
00000008 l       *ABS*	00000000 DMA_ADRT
0000000c l       *ABS*	00000000 DMA_DESC
00000010 l       *ABS*	00000000 DMA_CTRL
00000014 l       *ABS*	00000000 DMA_STAT
00000018 l       *ABS*	00000000 DMA_GCTL
0000001c l       *ABS*	00000000 DMA_CRCC
00000020 l       *ABS*	00000000 DMA_CRCR
00000024 l       *ABS*	00000000 DMA_TMTV
00000028 l       *ABS*	00000000 DMA_SCTL
00000040 l       *ABS*	00000000 DMA_STAT0
00000044 l       *ABS*	00000000 DMA_STAT1
00000048 l       *ABS*	00000000 DMA_STAT2
0000004c l       *ABS*	00000000 DMA_STAT3
00000050 l       *ABS*	00000000 DMA_STAT4
00000054 l       *ABS*	00000000 DMA_STAT5
00000058 l       *ABS*	00000000 DMA_STAT6
0000005c l       *ABS*	00000000 DMA_STAT7
00000104 l       *ABS*	00000000 DMA_AD2S
00000108 l       *ABS*	00000000 DMA_AD2T
0000010c l       *ABS*	00000000 DMA_DES2
00000180 l       *ABS*	00000000 DMA_CRCT
f0000000 l       *ABS*	00000000 PL340_BASE_UNBUF
e0000000 l       *ABS*	00000000 PL340_BASE_BUF
e0000000 l       *ABS*	00000000 PL340_BASE
00000000 l       *ABS*	00000000 MC_STAT
00000004 l       *ABS*	00000000 MC_CMD
00000008 l       *ABS*	00000000 MC_DIRC
0000000c l       *ABS*	00000000 MC_MCFG
00000010 l       *ABS*	00000000 MC_REFP
00000014 l       *ABS*	00000000 MC_CASL
00000018 l       *ABS*	00000000 MC_DQSS
0000001c l       *ABS*	00000000 MC_MRD
00000020 l       *ABS*	00000000 MC_RAS
00000024 l       *ABS*	00000000 MC_RC
00000028 l       *ABS*	00000000 MC_RCD
0000002c l       *ABS*	00000000 MC_RFC
00000030 l       *ABS*	00000000 MC_RP
00000034 l       *ABS*	00000000 MC_RRD
00000038 l       *ABS*	00000000 MC_WR
0000003c l       *ABS*	00000000 MC_WTR
00000040 l       *ABS*	00000000 MC_XP
00000044 l       *ABS*	00000000 MC_XSR
00000048 l       *ABS*	00000000 MC_ESR
0000004c l       *ABS*	00000000 MC_MCFG2
00000050 l       *ABS*	00000000 MC_MCFG3
00000100 l       *ABS*	00000000 MC_QOS0
00000104 l       *ABS*	00000000 MC_QOS1
00000108 l       *ABS*	00000000 MC_QOS2
0000010c l       *ABS*	00000000 MC_QOS3
00000110 l       *ABS*	00000000 MC_QOS4
00000114 l       *ABS*	00000000 MC_QOS5
00000118 l       *ABS*	00000000 MC_QOS6
0000011c l       *ABS*	00000000 MC_QOS7
00000120 l       *ABS*	00000000 MC_QOS8
00000124 l       *ABS*	00000000 MC_QOS9
00000128 l       *ABS*	00000000 MC_QOS10
0000012c l       *ABS*	00000000 MC_QOS11
00000130 l       *ABS*	00000000 MC_QOS12
00000134 l       *ABS*	00000000 MC_QOS13
00000138 l       *ABS*	00000000 MC_QOS14
0000013c l       *ABS*	00000000 MC_QOS15
00000200 l       *ABS*	00000000 MC_CCFG0
00000204 l       *ABS*	00000000 MC_CCFG1
00000208 l       *ABS*	00000000 MC_CCFG2
0000020c l       *ABS*	00000000 MC_CCFG3
00000300 l       *ABS*	00000000 DLL_STATUS
00000304 l       *ABS*	00000000 DLL_CONFIG0
00000308 l       *ABS*	00000000 DLL_CONFIG1
f1000000 l       *ABS*	00000000 RTR_BASE_UNBUF
e1000000 l       *ABS*	00000000 RTR_BASE_BUF
e1000000 l       *ABS*	00000000 RTR_BASE
00000000 l       *ABS*	00000000 RTR_CONTROL
00000004 l       *ABS*	00000000 RTR_STATUS
00000008 l       *ABS*	00000000 RTR_EHDR
0000000c l       *ABS*	00000000 RTR_EKEY
00000010 l       *ABS*	00000000 RTR_EDAT
00000014 l       *ABS*	00000000 RTR_ESTAT
00000018 l       *ABS*	00000000 RTR_DHDR
0000001c l       *ABS*	00000000 RTR_DKEY
00000020 l       *ABS*	00000000 RTR_DDAT
00000024 l       *ABS*	00000000 RTR_DLINK
00000028 l       *ABS*	00000000 RTR_DSTAT
0000002c l       *ABS*	00000000 RTR_DGEN
00000200 l       *ABS*	00000000 RTR_DGF0
00000204 l       *ABS*	00000000 RTR_DGF1
00000208 l       *ABS*	00000000 RTR_DGF2
0000020c l       *ABS*	00000000 RTR_DGF3
00000210 l       *ABS*	00000000 RTR_DGF4
00000214 l       *ABS*	00000000 RTR_DGF5
00000218 l       *ABS*	00000000 RTR_DGF6
0000021c l       *ABS*	00000000 RTR_DGF7
00000220 l       *ABS*	00000000 RTR_DGF8
00000224 l       *ABS*	00000000 RTR_DGF9
00000228 l       *ABS*	00000000 RTR_DGF10
0000022c l       *ABS*	00000000 RTR_DGF11
00000230 l       *ABS*	00000000 RTR_DGF12
00000234 l       *ABS*	00000000 RTR_DGF13
00000238 l       *ABS*	00000000 RTR_DGF14
0000023c l       *ABS*	00000000 RTR_DGF15
00000300 l       *ABS*	00000000 RTR_DGC0
00000304 l       *ABS*	00000000 RTR_DGC1
00000308 l       *ABS*	00000000 RTR_DGC2
0000030c l       *ABS*	00000000 RTR_DGC3
00000310 l       *ABS*	00000000 RTR_DGC4
00000314 l       *ABS*	00000000 RTR_DGC5
00000318 l       *ABS*	00000000 RTR_DGC6
0000031c l       *ABS*	00000000 RTR_DGC7
00000320 l       *ABS*	00000000 RTR_DGC8
00000324 l       *ABS*	00000000 RTR_DGC9
00000328 l       *ABS*	00000000 RTR_DGC10
0000032c l       *ABS*	00000000 RTR_DGC11
00000330 l       *ABS*	00000000 RTR_DGC12
00000334 l       *ABS*	00000000 RTR_DGC13
00000338 l       *ABS*	00000000 RTR_DGC14
0000033c l       *ABS*	00000000 RTR_DGC15
00000f00 l       *ABS*	00000000 RTR_TST1
00000f04 l       *ABS*	00000000 RTR_TST2
00002000 l       *ABS*	00000000 P2P_TABLE_SIZE
00000400 l       *ABS*	00000000 MC_TABLE_SIZE
00000018 l       *ABS*	00000000 MC_RAM_WIDTH
00ffffff l       *ABS*	00000000 MC_RAM_MASK
00000008 l       *ABS*	00000000 P2P_EPW
00000003 l       *ABS*	00000000 P2P_LOG_EPW
00000007 l       *ABS*	00000000 P2P_EMASK
00000003 l       *ABS*	00000000 P2P_BPE
00000007 l       *ABS*	00000000 P2P_BMASK
00db6db6 l       *ABS*	00000000 P2P_INIT
e1004000 l       *ABS*	00000000 RTR_MCRAM_BASE
e1005000 l       *ABS*	00000000 RTR_MCRAM_TOP
e1008000 l       *ABS*	00000000 RTR_MCKEY_BASE
e1009000 l       *ABS*	00000000 RTR_MCKEY_TOP
e100c000 l       *ABS*	00000000 RTR_MCMASK_BASE
e100d000 l       *ABS*	00000000 RTR_MCMASK_TOP
e1010000 l       *ABS*	00000000 RTR_P2P_BASE
e1018000 l       *ABS*	00000000 RTR_P2P_TOP
00000020 l       *ABS*	00000000 MC_CAM_WIDTH
f2000000 l       *ABS*	00000000 SYSCTL_BASE_UNBUF
e2000000 l       *ABS*	00000000 SYSCTL_BASE_BUF
e2000000 l       *ABS*	00000000 SYSCTL_BASE
5ec00000 l       *ABS*	00000000 SC_CODE
59111012 l       *ABS*	00000000 CHIP_ID_CODE
00000000 l       *ABS*	00000000 SC_CHIP_ID
00000004 l       *ABS*	00000000 SC_CPU_DIS
00000008 l       *ABS*	00000000 SC_SET_IRQ
0000000c l       *ABS*	00000000 SC_CLR_IRQ
00000010 l       *ABS*	00000000 SC_SET_OK
00000010 l       *ABS*	00000000 SC_CPU_OK
00000014 l       *ABS*	00000000 SC_CLR_OK
00000018 l       *ABS*	00000000 SC_SOFT_RST_L
0000001c l       *ABS*	00000000 SC_HARD_RST_L
00000020 l       *ABS*	00000000 SC_SUBS_RST_L
00000024 l       *ABS*	00000000 SC_SOFT_RST_P
00000028 l       *ABS*	00000000 SC_HARD_RST_P
0000002c l       *ABS*	00000000 SC_SUBS_RST_P
00000030 l       *ABS*	00000000 SC_RST_CODE
00000034 l       *ABS*	00000000 SC_MON_ID
00000038 l       *ABS*	00000000 SC_MISC_CTRL
0000003c l       *ABS*	00000000 GPIO_RES
00000040 l       *ABS*	00000000 GPIO_PORT
00000044 l       *ABS*	00000000 GPIO_DIR
00000048 l       *ABS*	00000000 GPIO_SET
0000004c l       *ABS*	00000000 GPIO_CLR
00000048 l       *ABS*	00000000 GPIO_READ
00000050 l       *ABS*	00000000 SC_PLL1
00000054 l       *ABS*	00000000 SC_PLL2
00000058 l       *ABS*	00000000 SC_FLAG
00000058 l       *ABS*	00000000 SC_SETFLAG
0000005c l       *ABS*	00000000 SC_CLRFLAG
00000060 l       *ABS*	00000000 SC_CLKMUX
00000064 l       *ABS*	00000000 SC_SLEEP
00000068 l       *ABS*	00000000 SC_TS0
0000006c l       *ABS*	00000000 SC_TS1
00000070 l       *ABS*	00000000 SC_TS2
00000080 l       *ABS*	00000000 SC_ARB0
00000100 l       *ABS*	00000000 SC_TAS0
00000180 l       *ABS*	00000000 SC_TAC0
00000200 l       *ABS*	00000000 SC_LINK_DIS
00000000 l       *ABS*	00000000 RST_POR
00000001 l       *ABS*	00000000 RST_WDT
00000002 l       *ABS*	00000000 RST_USER
00000003 l       *ABS*	00000000 RST_SW
00000004 l       *ABS*	00000000 RST_WDI
f3000000 l       *ABS*	00000000 WDOG_BASE_UNBUF
e3000000 l       *ABS*	00000000 WDOG_BASE_BUF
e3000000 l       *ABS*	00000000 WDOG_BASE
00000000 l       *ABS*	00000000 WD_LOAD
00000004 l       *ABS*	00000000 WD_COUNT
00000008 l       *ABS*	00000000 WD_CTRL
0000000c l       *ABS*	00000000 WD_INTCLR
00000010 l       *ABS*	00000000 WD_RAWINT
00000014 l       *ABS*	00000000 WD_MSKINT
00000c00 l       *ABS*	00000000 WD_LOCK
1acce551 l       *ABS*	00000000 WD_CODE
00000001 l       *ABS*	00000000 WD_INT_B
00000002 l       *ABS*	00000000 WD_RST_B
f4000000 l       *ABS*	00000000 ETH_BASE_UNBUF
e4000000 l       *ABS*	00000000 ETH_BASE_BUF
e4000000 l       *ABS*	00000000 ETH_BASE
e4000000 l       *ABS*	00000000 ETH_TX_BASE
00000600 l       *ABS*	00000000 ETH_TX_SIZE
e4000600 l       *ABS*	00000000 ETH_TX_TOP
e4004000 l       *ABS*	00000000 ETH_RX_BASE
00000c00 l       *ABS*	00000000 ETH_RX_SIZE
e4004c00 l       *ABS*	00000000 ETH_RX_TOP
e4008000 l       *ABS*	00000000 ETH_RX_DESC_RAM
e400c000 l       *ABS*	00000000 ETH_REGS
00000000 l       *ABS*	00000000 ETH_CONTROL
00000004 l       *ABS*	00000000 ETH_STATUS
00000008 l       *ABS*	00000000 ETH_TX_LEN
0000000c l       *ABS*	00000000 ETH_TX_CMD
00000010 l       *ABS*	00000000 ETH_RX_CMD
00000014 l       *ABS*	00000000 ETH_MAC_LO
00000018 l       *ABS*	00000000 ETH_MAC_HI
0000001c l       *ABS*	00000000 ETH_PHY_CTRL
00000020 l       *ABS*	00000000 ETH_INT_CLR
00000024 l       *ABS*	00000000 ETH_RX_BUF_RP
0000002c l       *ABS*	00000000 ETH_RX_DESC_RP
00000001 l       *ABS*	00000000 ETH_TX_CLR
00000010 l       *ABS*	00000000 ETH_RX_CLR
00000001 l       *ABS*	00000000 PHY_CTRL_NRST
00000002 l       *ABS*	00000000 PHY_CTRL_DIN
00000004 l       *ABS*	00000000 PHY_CTRL_DOUT
00000008 l       *ABS*	00000000 PHY_CTRL_OE
00000010 l       *ABS*	00000000 PHY_CTRL_CLK
00000000 l       *ABS*	00000000 PKT_MC
00400000 l       *ABS*	00000000 PKT_P2P
00800000 l       *ABS*	00000000 PKT_NN
00a00000 l       *ABS*	00000000 PKT_NND
00c00000 l       *ABS*	00000000 PKT_FR
00020000 l       *ABS*	00000000 PKT_PL
00020000 l       *ABS*	00000000 PKT_MC_PL
00420000 l       *ABS*	00000000 PKT_P2P_PL
00820000 l       *ABS*	00000000 PKT_NN_PL
00c20000 l       *ABS*	00000000 PKT_FR_PL
0000000a l       *ABS*	00000000 CLK_XTAL_MHZ
0007011a l       *ABS*	00000000 PLL_260
0007011e l       *ABS*	00000000 PLL_300
00070121 l       *ABS*	00000000 PLL_330
00070128 l       *ABS*	00000000 PLL_400
00000050 l       *ABS*	00000000 PLL_LOCK_TIME
809488a5 l       *ABS*	00000000 PLL_CLK_SEL
00000020 l       *ABS*	00000000 SERIAL_NCS
00000010 l       *ABS*	00000000 SERIAL_CLK
00000008 l       *ABS*	00000000 SERIAL_SI
00000004 l       *ABS*	00000000 SERIAL_SO
00000038 l       *ABS*	00000000 SERIAL_OE
80000000 l       *ABS*	00000000 SDRAM_TQ
40000000 l       *ABS*	00000000 SDRAM_DPD
20000000 l       *ABS*	00000000 SDRAM_HERE
00000001 l       *ABS*	00000000 LED_0
00000010 l       *ABS*	00000000 MODE_USER
00000011 l       *ABS*	00000000 MODE_FIQ
00000012 l       *ABS*	00000000 MODE_IRQ
00000013 l       *ABS*	00000000 MODE_SVC
00000017 l       *ABS*	00000000 MODE_ABT
0000001b l       *ABS*	00000000 MODE_UND
0000001f l       *ABS*	00000000 MODE_SYS
00000020 l       *ABS*	00000000 THUMB_BIT
00000080 l       *ABS*	00000000 IMASK_IRQ
00000040 l       *ABS*	00000000 IMASK_FIQ
000000c0 l       *ABS*	00000000 IMASK_ALL
00000001 l       *ABS*	00000000 SARK_EVENT
00000180 l       *ABS*	00000000 SVC_STACK
00000100 l       *ABS*	00000000 IRQ_STACK
00000100 l       *ABS*	00000000 FIQ_STACK
00000004 l       *ABS*	00000000 NUM_SDP_MSGS
0000000f l       *ABS*	00000000 SARK_SLOT
00000010 l       *ABS*	00000000 INIT_EVENTS
deaddead l       *ABS*	00000000 DEAD_WORD
00000001 l       *ABS*	00000000 APLX_ACOPY
00000002 l       *ABS*	00000000 APLX_RCOPY
00000003 l       *ABS*	00000000 APLX_FILL
00000004 l       *ABS*	00000000 APLX_EXEC
000000ff l       *ABS*	00000000 APLX_END
00000010 l       *ABS*	00000000 APLX_ENTRY_SIZE
00000040 l       *ABS*	00000000 APLX_BUF_SIZE
00007fc0 l       *ABS*	00000000 APLX_BUFFER
000000ff l       *ABS*	00000000 TAG_NONE
00000000 l       *ABS*	00000000 TAG_HOST
00000001 l       *ABS*	00000000 RTR_ALLOC_FIRST
00000400 l       *ABS*	00000000 RTR_ALLOC_LAST
000003ff l       *ABS*	00000000 RTR_ALLOC_MAX
00000001 l       *ABS*	00000000 ALLOC_LOCK
00000002 l       *ABS*	00000000 ALLOC_ID
00000005 l       *ABS*	00000000 A_LOCK_SEMA
00000001 l       *ABS*	00000000 A_RTE_RESET
00000002 l       *ABS*	00000000 A_RTE_UNDEF
00000003 l       *ABS*	00000000 A_RTE_SVC
00000004 l       *ABS*	00000000 A_RTE_PABT
00000005 l       *ABS*	00000000 A_RTE_DABT
00000006 l       *ABS*	00000000 A_RTE_IRQ
00000007 l       *ABS*	00000000 A_RTE_FIQ
00000008 l       *ABS*	00000000 A_RTE_VIC
00000002 l       *ABS*	00000000 A_STATE_RTE
00000006 l       *ABS*	00000000 EVENT_COUNT
00000000 l       *ABS*	00000000 CMD_VER
00000001 l       *ABS*	00000000 CMD_RUN
00000002 l       *ABS*	00000000 CMD_READ
00000003 l       *ABS*	00000000 CMD_WRITE
00000004 l       *ABS*	00000000 CMD_APLX
00000005 l       *ABS*	00000000 CMD_FILL
00000010 l       *ABS*	00000000 CMD_REMAP
00000011 l       *ABS*	00000000 CMD_LINK_READ
00000012 l       *ABS*	00000000 CMD_LINK_WRITE
00000013 l       *ABS*	00000000 CMD_AR
00000014 l       *ABS*	00000000 CMD_NNP
00000015 l       *ABS*	00000000 CMD_P2PC
00000016 l       *ABS*	00000000 CMD_SIG
00000017 l       *ABS*	00000000 CMD_FFD
00000018 l       *ABS*	00000000 CMD_AS
00000019 l       *ABS*	00000000 CMD_LED
0000001a l       *ABS*	00000000 CMD_IPTAG
0000001b l       *ABS*	00000000 CMD_SROM
0000001c l       *ABS*	00000000 CMD_ALLOC
0000001d l       *ABS*	00000000 CMD_RTR
00000040 l       *ABS*	00000000 CMD_TUBE
00000080 l       *ABS*	00000000 RC_OK
00000081 l       *ABS*	00000000 RC_LEN
00000082 l       *ABS*	00000000 RC_SUM
00000083 l       *ABS*	00000000 RC_CMD
00000084 l       *ABS*	00000000 RC_ARG
00000085 l       *ABS*	00000000 RC_PORT
00000086 l       *ABS*	00000000 RC_TIMEOUT
00000087 l       *ABS*	00000000 RC_ROUTE
00000088 l       *ABS*	00000000 RC_CPU
00000089 l       *ABS*	00000000 RC_DEAD
0000008a l       *ABS*	00000000 RC_BUF
0000008b l       *ABS*	00000000 RC_P2P_NOREPLY
0000008c l       *ABS*	00000000 RC_P2P_REJECT
0000008d l       *ABS*	00000000 RC_P2P_BUSY
0000008e l       *ABS*	00000000 RC_P2P_TIMEOUT
0000008f l       *ABS*	00000000 RC_PKT_TX
00000000 l       *ABS*	00000000 TYPE_BYTE
00000001 l       *ABS*	00000000 TYPE_HALF
00000002 l       *ABS*	00000000 TYPE_WORD
00000005 l       *ABS*	00000000 PORT_SHIFT
000000e0 l       *ABS*	00000000 PORT_MASK
0000001f l       *ABS*	00000000 CPU_MASK
000000ff l       *ABS*	00000000 PORT_ETH
00000100 l       *ABS*	00000000 SDP_BUF_SIZE
00000080 l       *ABS*	00000000 VCPU_SIZE
0000002c l       *ABS*	00000000 VCPU_RT_CODE
0000002d l       *ABS*	00000000 VCPU_CPU_FLAGS
0000002e l       *ABS*	00000000 VCPU_CPU_STATE
0000002f l       *ABS*	00000000 VCPU_APP_ID
0000001c l       *ABS*	00000000 SARK_MSG_INT
0000001d l       *ABS*	00000000 SARK_SIG_INT
00000000 l       *ABS*	00000000 SARK_VIRT_CPU
00000008 l       *ABS*	00000000 SARK_RANDOM
00000030 l       *ABS*	00000000 SARK_CPU_CLK
00000020 l       *ABS*	00000000 SV_SSIZE
00000060 l       *ABS*	00000000 SV_USIZE
00000080 l       *ABS*	00000000 SV_ISIZE
00000020 l       *ABS*	00000000 SV_VSIZE
00000040 l       *ABS*	00000000 SV_RSIZE
00001000 l       *ABS*	00000000 SV_SIZE
e5007fe0 l       *ABS*	00000000 SV_SROM
e5007f80 l       *ABS*	00000000 SV_UBASE
e5007f00 l       *ABS*	00000000 SV_IBASE
e5007f00 l       *ABS*	00000000 SV_SV
00000100 l       *ABS*	00000000 SYS_BOOT
e5007000 l       *ABS*	00000000 SYS_USER_TOP
e5000100 l       *ABS*	00000000 SYS_USER_BASE
e5007ee0 l       *ABS*	00000000 SV_VECTORS
e5007ea0 l       *ABS*	00000000 SV_RANDOM
e5007000 l       *ABS*	00000000 SV_VCPU
e5007900 l       *ABS*	00000000 SV_SPARE
000005a0 l       *ABS*	00000000 SPARE_SIZE
e5007fe0 l       *ABS*	00000000 SROM_FLAG_BASE
e5007f80 l       *ABS*	00000000 STATUS_MAP_BASE
e5007ee0 l       *ABS*	00000000 RST_BLOCK_BASE
00008000 l       *ABS*	00000000 SRF_PRESENT
000000f0 l       *ABS*	00000000 SRF_HW_VER
00000008 l       *ABS*	00000000 SRF_PHY_INIT
00000004 l       *ABS*	00000000 SRF_PHY_RST
00000002 l       *ABS*	00000000 SRF_PHY_WAIT
00000001 l       *ABS*	00000000 SRF_ETH
00000000 l       *ABS*	00000000 SRF_NONE
00000020 l       RO_DATA	00000000 reset_vec
00000004 l       RO_DATA	00000000 undef
00000024 l       RO_DATA	00000000 undef_vec
00000028 l       RO_DATA	00000000 svc_vec
0000002c l       RO_DATA	00000000 pabt_vec
00000030 l       RO_DATA	00000000 dabt_vec
0000003c l       RO_DATA	00000000 fiq_vec
00000078 l       RO_DATA	00000000 reset_entry
000000d8 l       RO_DATA	00000000 undef_error
000000e0 l       RO_DATA	00000000 svc_error
000000e8 l       RO_DATA	00000000 pabt_error
000000f0 l       RO_DATA	00000000 dabt_error
00000034 l       RO_DATA	00000000 aplx_proc
00000038 l       RO_DATA	00000000 irq_vec
000000f8 l       RO_DATA	00000000 irq_error
00000100 l       RO_DATA	00000000 fiq_error
00000040 l       RO_DATA	00000000 svc_stack
00000042 l       RO_DATA	00000000 irq_stack
00000044 l       RO_DATA	00000000 fiq_stack
00000046 l       RO_DATA	00000000 stack_size
00000048 l       RO_DATA	00000000 code_top
0000004c l       RO_DATA	00000000 heap_base
00000050 l       RO_DATA	00000000 stack_top
00000054 l       RO_DATA	00000000 stack_fill
00000058 l       RO_DATA	00000000 num_msgs
00000059 l       RO_DATA	00000000 sark_slot
0000005a l       RO_DATA	00000000 num_events
0000005b l       RO_DATA	00000000 api
0000005c l       RO_DATA	00000000 app_id
0000005d l       RO_DATA	00000000 app_flags
0000005e l       RO_DATA	00000000 __PAD
00000060 l       RO_DATA	00000000 event_vec
000000d0 l       RO_DATA	00000000 reset_error
00000114 l       RO_DATA	00000000 exc_error
00000138 l       RO_DATA	00000000 cc_error
000001dc l       RO_DATA	00000000 lg1
00000218 l       RO_DATA	00000000 ws1
00000278 l       RO_DATA	00000000 wc2
00000260 l       RO_DATA	00000000 wc1
000002d8 l       RO_DATA	00000000 delay1
00000374 l       RO_DATA	00000000 aplx_buffer
00000378 l       RO_DATA	00000000 aplx_loader
00000364 l       RO_DATA	00000000 aplx_l0
00000390 l       RO_DATA	00000000 aplx_copy
0000038c l       RO_DATA	00000000 aplx_rcopy
0000039e l       RO_DATA	00000000 aplx_fill
000003ae l       RO_DATA	00000000 aplx_exec
000003a4 l       RO_DATA	00000000 aplx_l1
00000000 l    df *ABS*	00000000 sark_base.c
00000000 l    df *ABS*	00000000 sark_event.c
00000000 l    df *ABS*	00000000 sark_timer.c
00000000 l    df *ABS*	00000000 sark_hw.c
00000000 l    df *ABS*	00000000 sark_isr.c
00000000 l    df *ABS*	00000000 sark_alloc.c
00000000 l    df *ABS*	00000000 sark_io.c
000013e0 l     F RO_DATA	00000040 io_buf_init
00001514 l     F RO_DATA	000000c2 io_put_fixed
00400004 l     O ZI_DATA	00000004 io_msg
00001e44 l     O RO_DATA	00000011 hex
00400008 l     O ZI_DATA	00000004 io_buf
0040000c l     O ZI_DATA	00000004 buf_ptr
00400010 l     O ZI_DATA	00000004 sp_ptr
00000000 l    df *ABS*	00000000 sark_pkt.c
00000000 l    df *ABS*	00000000 
00000000 l    df *ABS*	00000000 car_washer_test.c
000003b4 l     F RO_DATA	00000118 objCallbackFunc
00400000 l     O RW_DATA	00000004 event_id_counter.4298
00000000 l    df *ABS*	00000000 stdWrapperApi.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 Object.c
00000000 l    df *ABS*	00000000 Event.c
00000000 l    df *ABS*	00000000 Scheduler.c
00000000 l    df *ABS*	00000000 Scheduler_Priv.c
00000000 l    df *ABS*	00000000 spin1_api.c
00400014 l     O ZI_DATA	00000004 warnings
00400018 l     O ZI_DATA	00000004 fullq
0040001c l     O ZI_DATA	00000320 task_queue
00000000 l    df *ABS*	00000000 _udivsi3.o
00001968 l       RO_DATA	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 sark_build.c
00000000 l    df *ABS*	00000000 
00000040 l       *ABS*	00000000 RO_FROM
00000010 l       *ABS*	00000000 APLX_ENTRY
00001e88 l       *ABS*	00000000 RW_FROM
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 _ITM_registerTMCloneTable
00400000 l       *ABS*	00000000 DTCM_BASE
00400000 l       *ABS*	00000000 RW_BASE
00000004 l       *ABS*	00000000 RW_LENGTH
00000040 l       *ABS*	00000000 APLX_SIZE
00000000 l       *UND*	00000000 _ITM_deregisterTMCloneTable
00400004 l       *ABS*	00000000 ZI_BASE
00000000 l       *ABS*	00000000 RO_BASE
00000000 l       *ABS*	00000000 ITCM_BASE
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
000006a8 l       *ABS*	00000000 ZI_LENGTH
00001a80 l     F RO_DATA	00000008 __spin1_delay_us_from_arm
00001a88 l     F RO_DATA	00000008 __spin1_rand_from_arm
00001a90 l     F RO_DATA	00000008 __spin1_srand_from_arm
00400420 g     O ZI_DATA	00000004 old_vector
000001c8 g     F RO_DATA	00000000 sark_lock_get
00001930 g     F RO_DATA	0000002c sark_pre_main
00000c50 g     F RO_DATA	00000034 sark_shmsg_get
00000ac4 g     F RO_DATA	00000004 RunDiscreteEventSimulation
00000800 g       *ABS*	00000000 STACK_SIZE
0000034a g     F RO_DATA	00000000 sark_bx
00001314 g     F RO_DATA	000000a0 sark_xfree
00000238 g     F RO_DATA	00000000 sark_msg_cpy
0000067c g     F RO_DATA	0000001c printfMessageLevel
0000029c g     F RO_DATA	00000000 sark_rand
000018a4 g     F RO_DATA	00000012 spin1_memcpy
000008bc g     F RO_DATA	00000010 objInitListHead
00001138 g     F RO_DATA	0000003c event_alloc
00000700 g     F RO_DATA	00000004 SetRandNumberSeed
00000be0 g     F RO_DATA	0000001e sark_block_init
0000120c g     F RO_DATA	00000028 sark_fiq_han
00000c30 g     F RO_DATA	00000020 sark_msg_free
00000858 g     F RO_DATA	0000003c createObj
00000ac8 g     F RO_DATA	000000e8 RunDiscreteEventSimulationPriv
00001894 g     F RO_DATA	00000008 spin1_rand
000004cc g     F RO_DATA	00000190 c_main
00000f80 g     F RO_DATA	00000174 sark_int
00000314 g     F RO_DATA	00000000 sark_int_han
00000f6c g     F RO_DATA	00000012 sark_wait
000001b8 g     F RO_DATA	00000000 spin1_mode_restore
00000f5c g     F RO_DATA	00000010 sark_cmd_fill
0040033c g     O ZI_DATA	00000004 tbHandle
000018c0 g     F RO_DATA	00000008 spin1_free
00001174 g     F RO_DATA	00000050 sark_vic_init
00001968 g     F RO_DATA	000000f4 __udivsi3
0000016c g     F RO_DATA	00000000 cpu_shutdown
000001b8 g     F RO_DATA	00000000 cpu_int_restore
00400424 g     O ZI_DATA	0000002c diagnostics
00410000 g       *ABS*	00000000 STACK_TOP
004006ac g       ZI_DATA	00000000 HEAP_BASE
00001234 g     F RO_DATA	000000c8 sark_xalloc
00400450 g     O ZI_DATA	00000004 old_enable
0000034c g     F RO_DATA	00000000 __gnu_thumb1_case_uqi
00400454 g     O ZI_DATA	00000004 user_arg1
00000c84 g     F RO_DATA	00000024 sark_shmsg_free
000009c4 g     F RO_DATA	00000100 objSchedulerFunc
00000938 g     F RO_DATA	00000048 DumpObjElements
0000012c g       RO_DATA	00000000 rt_error
00000bbc g     F RO_DATA	00000010 sark_cpu_state
0000075c g     F RO_DATA	00000004 getTimeWrapper
0000195c g     F RO_DATA	0000000a sark_post_main
00000980 g     F RO_DATA	00000030 createEvent
00000000 g       RO_DATA	00000000 cpu_reset
000002e4 g     F RO_DATA	00000000 sark_div10
00000894 g     F RO_DATA	00000014 freeObj
000002c4 g     F RO_DATA	00000000 sark_srand
00000108 g       RO_DATA	00000000 vic_error
0000081c g     F RO_DATA	00000004 destroySimTimebase
0000189c g     F RO_DATA	00000008 spin1_delay_us
00001b88 g     O RO_DATA	00000010 build_name
0000084c g     F RO_DATA	0000000c setTimbaseSetting
00000348  w    F RO_DATA	00000000 sark_config
000006c0 g     F RO_DATA	0000002c freeWrapper
000010f4 g     F RO_DATA	0000002c event_pause
000013b4 g     F RO_DATA	00000014 sark_free
00001b98 g     O RO_DATA	00000004 build_date
000001ec g     F RO_DATA	00000000 sark_lock_free
000012fc g     F RO_DATA	00000018 sark_alloc
00000758 g     F RO_DATA	00000004 highResolutionSleepWrapper
00000190 g     F RO_DATA	00000000 cpu_init_mode
0000065c g     F RO_DATA	00000020 printfMessage
00000248 g     F RO_DATA	00000000 sark_word_cpy
00000838 g     F RO_DATA	00000014 getTimebaseSetting
0000017c g     F RO_DATA	00000000 cpu_sleep
00001a7c  w    F RO_DATA	00000004 __aeabi_ldiv0
00400458 g     O ZI_DATA	00000001 leadAp
0040034c g     O ZI_DATA	0000003c sark
000006f0 g     F RO_DATA	00000010 memcpyWrapper
00000da4 g     F RO_DATA	000000a8 sark_msg_send
00000704 g     F RO_DATA	00000004 GetRandNumber
000001c0 g     F RO_DATA	00000000 spin1_wfi
00000e4c g     F RO_DATA	00000040 sark_cmd_ver
000001c0 g     F RO_DATA	00000000 cpu_wfi
00001120 g     F RO_DATA	00000018 event_stop
000001a8 g     F RO_DATA	00000000 cpu_int_disable
000011c4 g     F RO_DATA	00000048 sark_vic_set
0040045c g     O ZI_DATA	00000004 thrown
000013c8 g     F RO_DATA	00000018 sark_heap_init
00001968 g     F RO_DATA	00000000 __aeabi_uidiv
00000698 g     F RO_DATA	00000004 assertAction
00400388 g     O ZI_DATA	00000098 event
00400340 g     O ZI_DATA	00000008 stHeadObject
0000074c g     F RO_DATA	00000008 GetSystemClock
00000ef2 g     F RO_DATA	0000006a sark_cmd_write
000008b0 g     F RO_DATA	0000000c objDetachEvent
000018b6 g     F RO_DATA	0000000a spin1_malloc
00000ca8  w    F RO_DATA	000000fc sark_init
00000bb0  w    F RO_DATA	0000000c rte_handler
0000035c g     F RO_DATA	00000000 sark_aplx
000015d8 g     F RO_DATA	000002b4 io_printf
00400460 g     O ZI_DATA	00000148 dma_queue
00000214 g     F RO_DATA	00000000 sark_word_set
004005a8 g     O ZI_DATA	00000004 old_select
00000820 g     F RO_DATA	00000010 incSimTimebaseTick
004005ac g     O ZI_DATA	00000004 ticks
0000069c g     F RO_DATA	00000024 mallocWrapper
00000344 g     F RO_DATA	00000000 null_int_han
000018c8 g     F RO_DATA	00000068 schedule_sysmode
0000188c g     F RO_DATA	00000008 spin1_srand
00000708 g     F RO_DATA	00000044 GetRandNumberRange
00000200 g     F RO_DATA	00000000 sark_str_cpy
00001a5c g     F RO_DATA	00000020 __aeabi_uidivmod
00000770 g     F RO_DATA	000000ac createSimTimebase
000008a8 g     F RO_DATA	00000008 objAttachEvent
00000754 g     F RO_DATA	00000004 sleepWrapper
004005b0 g     O ZI_DATA	00000004 user_arg0
00000bcc g     F RO_DATA	00000014 sark_app_lead
000009b0 g     F RO_DATA	00000014 deleteEvent
00400348 g     O ZI_DATA	00000004 simulationTotalTick
000008f0 g     F RO_DATA	00000048 objDeque
00001a7c  w    F RO_DATA	00000004 __aeabi_idiv0
004005b4 g     O ZI_DATA	00000030 callback
000008cc g     F RO_DATA	00000024 objEnque
00001420 g     F RO_DATA	000000f4 io_put_char
00000830 g     F RO_DATA	00000008 GetSimTimebaseTick
00000760 g     F RO_DATA	00000010 delayWrapper
000001a8 g     F RO_DATA	00000000 spin1_int_disable
000006ec g     F RO_DATA	00000004 memsetWrapper
00000e8c g     F RO_DATA	00000066 sark_cmd_read
00001e58 g       *ABS*	00000000 RO_LENGTH
00000c00 g     F RO_DATA	00000030 sark_msg_get
000002d0 g     F RO_DATA	00000000 sark_delay_us
004005e4 g     O ZI_DATA	000000c8 tx_packet_queue



Disassembly of section RO_DATA:

00000000 <cpu_reset>:
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <reset_vec>

00000004 <undef>:
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <undef_vec>
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <svc_vec>
       c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <pabt_vec>
      10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <dabt_vec>
      14:	ebfffffa 	bl	4 <undef>
      18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <ROM_TOP+0x9ff7030>
      1c:	e59ff018 	ldr	pc, [pc, #24]	; 3c <fiq_vec>

00000020 <reset_vec>:
      20:	00000078 	.word	0x00000078

00000024 <undef_vec>:
      24:	000000d8 	.word	0x000000d8

00000028 <svc_vec>:
      28:	000000e0 	.word	0x000000e0

0000002c <pabt_vec>:
      2c:	000000e8 	.word	0x000000e8

00000030 <dabt_vec>:
      30:	000000f0 	.word	0x000000f0

00000034 <aplx_proc>:
      34:	0000035d 	.word	0x0000035d

00000038 <irq_vec>:
      38:	000000f8 	.word	0x000000f8

0000003c <fiq_vec>:
      3c:	00000100 	.word	0x00000100

00000040 <svc_stack>:
      40:	0060      	.short	0x0060

00000042 <irq_stack>:
      42:	0040      	.short	0x0040

00000044 <fiq_stack>:
      44:	0040      	.short	0x0040

00000046 <stack_size>:
      46:	0800      	.short	0x0800

00000048 <code_top>:
      48:	00001e58 	.word	0x00001e58

0000004c <heap_base>:
      4c:	004006ac 	.word	0x004006ac

00000050 <stack_top>:
      50:	00410000 	.word	0x00410000

00000054 <stack_fill>:
      54:	deaddead 	.word	0xdeaddead

00000058 <num_msgs>:
      58:	04          	.byte	0x04

00000059 <sark_slot>:
      59:	0f          	.byte	0x0f

0000005a <num_events>:
      5a:	10          	.byte	0x10

0000005b <api>:
	...

0000005c <app_id>:
	...

0000005d <app_flags>:
	...

0000005e <__PAD>:
	...

00000060 <event_vec>:
	...

00000078 <reset_entry>:
      78:	e24f1060 	sub	r1, pc, #96	; 0x60
      7c:	e1c103bc 	strh	r0, [r1, #60]	; 0x3c
      80:	e28f0048 	add	r0, pc, #72	; 0x48
      84:	e5810000 	str	r0, [r1]
      88:	e59f00f4 	ldr	r0, [pc, #244]	; 184 <DMA_CRCT+0x4>
      8c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
      90:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
      94:	e3a0d902 	mov	sp, #32768	; 0x8000
      98:	fa0000aa 	blx	348 <sark_config>
      9c:	e51fd054 	ldr	sp, [pc, #-84]	; 50 <stack_top>
      a0:	e15f26b2 	ldrh	r2, [pc, #-98]	; 46 <stack_size>
      a4:	e51f1058 	ldr	r1, [pc, #-88]	; 54 <stack_fill>
      a8:	e04d0002 	sub	r0, sp, r2
      ac:	eb000058 	bl	214 <sark_word_set>
      b0:	e1a0000d 	mov	r0, sp
      b4:	fa0002fb 	blx	ca8 <sark_init>
      b8:	e121f000 	msr	CPSR_c, r0
      bc:	fa0003aa 	blx	f6c <sark_wait>
      c0:	fa00061a 	blx	1930 <sark_pre_main>
      c4:	eb000100 	bl	4cc <c_main>
      c8:	fa000623 	blx	195c <sark_post_main>
      cc:	eb00002a 	bl	17c <cpu_sleep>

000000d0 <reset_error>:
      d0:	e3a00001 	mov	r0, #1
      d4:	ea000014 	b	12c <rt_error>

000000d8 <undef_error>:
      d8:	e3a0b002 	mov	fp, #2
      dc:	ea00000c 	b	114 <exc_error>

000000e0 <svc_error>:
      e0:	e3a0b003 	mov	fp, #3
      e4:	ea00000a 	b	114 <exc_error>

000000e8 <pabt_error>:
      e8:	e3a0b004 	mov	fp, #4
      ec:	ea000008 	b	114 <exc_error>

000000f0 <dabt_error>:
      f0:	e3a0b005 	mov	fp, #5
      f4:	ea000006 	b	114 <exc_error>

000000f8 <irq_error>:
      f8:	e3a0b006 	mov	fp, #6
      fc:	ea000004 	b	114 <exc_error>

00000100 <fiq_error>:
     100:	e3a0b007 	mov	fp, #7
     104:	ea000002 	b	114 <exc_error>

00000108 <vic_error>:
     108:	e3a0b008 	mov	fp, #8
     10c:	e3a0042f 	mov	r0, #788529152	; 0x2f000000
     110:	e5900030 	ldr	r0, [r0, #48]	; 0x30

00000114 <exc_error>:
     114:	e1a0a00e 	mov	sl, lr
     118:	e14f8000 	mrs	r8, SPSR
     11c:	e38890c0 	orr	r9, r8, #192	; 0xc0
     120:	e3c99020 	bic	r9, r9, #32
     124:	e12ff009 	msr	CPSR_fsxc, r9
     128:	ea000002 	b	138 <cc_error>

0000012c <rt_error>:
     12c:	e1a0b000 	mov	fp, r0
     130:	e10f8000 	mrs	r8, CPSR
     134:	e1a0a00e 	mov	sl, lr

00000138 <cc_error>:
     138:	e59fc048 	ldr	ip, [pc, #72]	; 188 <DMA_CRCT+0x8>
     13c:	e59cc000 	ldr	ip, [ip]
     140:	e3a09080 	mov	r9, #128	; 0x80
     144:	e59fe040 	ldr	lr, [pc, #64]	; 18c <DMA_CRCT+0xc>
     148:	e02ee99c 	mla	lr, ip, r9, lr
     14c:	e1a0900d 	mov	r9, sp
     150:	e88e07ff 	stm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl}
     154:	e5ceb02c 	strb	fp, [lr, #44]	; 0x2c
     158:	e3a08002 	mov	r8, #2
     15c:	e5ce802e 	strb	r8, [lr, #46]	; 0x2e
     160:	e1a0000b 	mov	r0, fp
     164:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
     168:	fa000290 	blx	bb0 <rte_handler>

0000016c <cpu_shutdown>:
     16c:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
     170:	e3a0042f 	mov	r0, #788529152	; 0x2f000000
     174:	e3e01000 	mvn	r1, #0
     178:	e5801014 	str	r1, [r0, #20]

0000017c <cpu_sleep>:
     17c:	ee070f90 	mcr	15, 0, r0, cr7, cr0, {4}
     180:	eafffffd 	b	17c <cpu_sleep>
     184:	00001f7e 	.word	0x00001f7e
     188:	0040034c 	.word	0x0040034c
     18c:	e5007000 	.word	0xe5007000

00000190 <cpu_init_mode>:
     190:	e10f3000 	mrs	r3, CPSR
     194:	e121f001 	msr	CPSR_c, r1
     198:	e1a0d000 	mov	sp, r0
     19c:	e12ff003 	msr	CPSR_fsxc, r3
     1a0:	e0400102 	sub	r0, r0, r2, lsl #2
     1a4:	e12fff1e 	bx	lr

000001a8 <cpu_int_disable>:
     1a8:	e10f0000 	mrs	r0, CPSR
     1ac:	e38010c0 	orr	r1, r0, #192	; 0xc0
     1b0:	e121f001 	msr	CPSR_c, r1
     1b4:	e12fff1e 	bx	lr

000001b8 <cpu_int_restore>:
     1b8:	e12ff000 	msr	CPSR_fsxc, r0
     1bc:	e12fff1e 	bx	lr

000001c0 <cpu_wfi>:
     1c0:	ee070f90 	mcr	15, 0, r0, cr7, cr0, {4}
     1c4:	e12fff1e 	bx	lr

000001c8 <sark_lock_get>:
     1c8:	e3a0c4e2 	mov	ip, #-503316480	; 0xe2000000
     1cc:	e08cc100 	add	ip, ip, r0, lsl #2
     1d0:	e10f0000 	mrs	r0, CPSR
     1d4:	e38010c0 	orr	r1, r0, #192	; 0xc0
     1d8:	e121f001 	msr	CPSR_c, r1

000001dc <lg1>:
     1dc:	e59c1100 	ldr	r1, [ip, #256]	; 0x100
     1e0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
     1e4:	1afffffc 	bne	1dc <lg1>
     1e8:	e12fff1e 	bx	lr

000001ec <sark_lock_free>:
     1ec:	e3a0c4e2 	mov	ip, #-503316480	; 0xe2000000
     1f0:	e08c1101 	add	r1, ip, r1, lsl #2
     1f4:	e5911180 	ldr	r1, [r1, #384]	; 0x180
     1f8:	e121f000 	msr	CPSR_c, r0
     1fc:	e12fff1e 	bx	lr

00000200 <sark_str_cpy>:
     200:	e4d12001 	ldrb	r2, [r1], #1
     204:	e3520000 	cmp	r2, #0
     208:	e4c02001 	strb	r2, [r0], #1
     20c:	1afffffb 	bne	200 <sark_str_cpy>
     210:	e12fff1e 	bx	lr

00000214 <sark_word_set>:
     214:	e1a03001 	mov	r3, r1

00000218 <ws1>:
     218:	e2522010 	subs	r2, r2, #16
     21c:	28a0000a 	stmiacs	r0!, {r1, r3}
     220:	28a0000a 	stmiacs	r0!, {r1, r3}
     224:	2afffffb 	bcs	218 <ws1>
     228:	e1b02e82 	lsls	r2, r2, #29
     22c:	28a0000a 	stmiacs	r0!, {r1, r3}
     230:	48a00002 	stmiami	r0!, {r1}
     234:	e12fff1e 	bx	lr

00000238 <sark_msg_cpy>:
     238:	e2800004 	add	r0, r0, #4
     23c:	e2811004 	add	r1, r1, #4
     240:	e1d120b0 	ldrh	r2, [r1]
     244:	e2822004 	add	r2, r2, #4

00000248 <sark_word_cpy>:
     248:	e3120003 	tst	r2, #3
     24c:	13c22003 	bicne	r2, r2, #3
     250:	12822004 	addne	r2, r2, #4
     254:	e92d4010 	push	{r4, lr}
     258:	e2522020 	subs	r2, r2, #32
     25c:	3a000005 	bcc	278 <wc2>

00000260 <wc1>:
     260:	e8b15018 	ldm	r1!, {r3, r4, ip, lr}
     264:	e8a05018 	stmia	r0!, {r3, r4, ip, lr}
     268:	e8b15018 	ldm	r1!, {r3, r4, ip, lr}
     26c:	e8a05018 	stmia	r0!, {r3, r4, ip, lr}
     270:	e2522020 	subs	r2, r2, #32
     274:	2afffff9 	bcs	260 <wc1>

00000278 <wc2>:
     278:	e1b0ce02 	lsls	ip, r2, #28
     27c:	28b15018 	ldmcs	r1!, {r3, r4, ip, lr}
     280:	28a05018 	stmiacs	r0!, {r3, r4, ip, lr}
     284:	48b10018 	ldmmi	r1!, {r3, r4}
     288:	48a00018 	stmiami	r0!, {r3, r4}
     28c:	e1b0cf02 	lsls	ip, r2, #30
     290:	24913004 	ldrcs	r3, [r1], #4
     294:	24803004 	strcs	r3, [r0], #4
     298:	e8bd8010 	pop	{r4, pc}

0000029c <sark_rand>:
     29c:	e59f301c 	ldr	r3, [pc, #28]	; 2c0 <sark_rand+0x24>
     2a0:	e8930003 	ldm	r3, {r0, r1}
     2a4:	e11100a1 	tst	r1, r1, lsr #1
     2a8:	e1b02060 	rrxs	r2, r0
     2ac:	e0a11001 	adc	r1, r1, r1
     2b0:	e0222600 	eor	r2, r2, r0, lsl #12
     2b4:	e0220a22 	eor	r0, r2, r2, lsr #20
     2b8:	e8830003 	stm	r3, {r0, r1}
     2bc:	e12fff1e 	bx	lr
     2c0:	00400354 	.word	0x00400354

000002c4 <sark_srand>:
     2c4:	4a01      	ldr	r2, [pc, #4]	; (2cc <sark_srand+0x8>)
     2c6:	2100      	movs	r1, #0
     2c8:	c203      	stmia	r2!, {r0, r1}
     2ca:	4770      	bx	lr
     2cc:	00400354 	.word	0x00400354

000002d0 <sark_delay_us>:
     2d0:	4903      	ldr	r1, [pc, #12]	; (2e0 <delay1+0x8>)
     2d2:	8809      	ldrh	r1, [r1, #0]
     2d4:	4341      	muls	r1, r0
     2d6:	0888      	lsrs	r0, r1, #2

000002d8 <delay1>:
     2d8:	3801      	subs	r0, #1
     2da:	d2fd      	bcs.n	2d8 <delay1>
     2dc:	4770      	bx	lr
     2de:	0000      	.short	0x0000
     2e0:	0040037c 	.word	0x0040037c

000002e4 <sark_div10>:
     2e4:	e241200a 	sub	r2, r1, #10
     2e8:	e0411121 	sub	r1, r1, r1, lsr #2
     2ec:	e0811221 	add	r1, r1, r1, lsr #4
     2f0:	e0811421 	add	r1, r1, r1, lsr #8
     2f4:	e0811821 	add	r1, r1, r1, lsr #16
     2f8:	e1a011a1 	lsr	r1, r1, #3
     2fc:	e0813101 	add	r3, r1, r1, lsl #2
     300:	e0522083 	subs	r2, r2, r3, lsl #1
     304:	52811001 	addpl	r1, r1, #1
     308:	4282200a 	addmi	r2, r2, #10
     30c:	e8800006 	stm	r0, {r1, r2}
     310:	e12fff1e 	bx	lr

00000314 <sark_int_han>:
     314:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
     318:	e24e0004 	sub	r0, lr, #4
     31c:	e14fc000 	mrs	ip, SPSR
     320:	e321f01f 	msr	CPSR_c, #31
     324:	e92d5000 	push	{ip, lr}
     328:	fa000314 	blx	f80 <sark_int>
     32c:	e8bd5000 	pop	{ip, lr}
     330:	e321f092 	msr	CPSR_c, #146	; 0x92
     334:	e16ff00c 	msr	SPSR_fsxc, ip
     338:	e3a0042f 	mov	r0, #788529152	; 0x2f000000
     33c:	e5800030 	str	r0, [r0, #48]	; 0x30
     340:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}

00000344 <null_int_han>:
     344:	e25ef004 	subs	pc, lr, #4

00000348 <sark_config>:
     348:	4770      	bx	lr

0000034a <sark_bx>:
     34a:	4700      	bx	r0

0000034c <__gnu_thumb1_case_uqi>:
     34c:	468c      	mov	ip, r1
     34e:	4671      	mov	r1, lr
     350:	3901      	subs	r1, #1
     352:	5c09      	ldrb	r1, [r1, r0]
     354:	0049      	lsls	r1, r1, #1
     356:	448e      	add	lr, r1
     358:	4661      	mov	r1, ip
     35a:	4770      	bx	lr

0000035c <sark_aplx>:
     35c:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
     35e:	4905      	ldr	r1, [pc, #20]	; (374 <aplx_buffer>)
     360:	a605      	add	r6, pc, #20	; (adr r6, 378 <aplx_loader>)
     362:	2740      	movs	r7, #64	; 0x40

00000364 <aplx_l0>:
     364:	ce3c      	ldmia	r6!, {r2, r3, r4, r5}
     366:	c13c      	stmia	r1!, {r2, r3, r4, r5}
     368:	3f10      	subs	r7, #16
     36a:	d1fb      	bne.n	364 <aplx_l0>
     36c:	1c04      	adds	r4, r0, #0
     36e:	393f      	subs	r1, #63	; 0x3f
     370:	4708      	bx	r1
	...

00000374 <aplx_buffer>:
     374:	00007fc0 	.word	0x00007fc0

00000378 <aplx_loader>:
     378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     37a:	2801      	cmp	r0, #1
     37c:	d008      	beq.n	390 <aplx_copy>
     37e:	2802      	cmp	r0, #2
     380:	d004      	beq.n	38c <aplx_rcopy>
     382:	2803      	cmp	r0, #3
     384:	d00b      	beq.n	39e <aplx_fill>
     386:	2804      	cmp	r0, #4
     388:	d011      	beq.n	3ae <aplx_exec>
     38a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0000038c <aplx_rcopy>:
     38c:	1912      	adds	r2, r2, r4
     38e:	3a10      	subs	r2, #16

00000390 <aplx_copy>:
     390:	cae1      	ldmia	r2!, {r0, r5, r6, r7}
     392:	c1e1      	stmia	r1!, {r0, r5, r6, r7}
     394:	cae1      	ldmia	r2!, {r0, r5, r6, r7}
     396:	c1e1      	stmia	r1!, {r0, r5, r6, r7}
     398:	3b20      	subs	r3, #32
     39a:	d8f9      	bhi.n	390 <aplx_copy>
     39c:	e7ec      	b.n	378 <aplx_loader>

0000039e <aplx_fill>:
     39e:	1c1d      	adds	r5, r3, #0
     3a0:	1c1e      	adds	r6, r3, #0
     3a2:	1c1f      	adds	r7, r3, #0

000003a4 <aplx_l1>:
     3a4:	c1e8      	stmia	r1!, {r3, r5, r6, r7}
     3a6:	c1e8      	stmia	r1!, {r3, r5, r6, r7}
     3a8:	3a20      	subs	r2, #32
     3aa:	d8fb      	bhi.n	3a4 <aplx_l1>
     3ac:	e7e4      	b.n	378 <aplx_loader>

000003ae <aplx_exec>:
     3ae:	9800      	ldr	r0, [sp, #0]
     3b0:	4788      	blx	r1
     3b2:	e7e1      	b.n	378 <aplx_loader>

000003b4 <objCallbackFunc>:
     3b4:	e92d4070 	push	{r4, r5, r6, lr}
     3b8:	e1a03000 	mov	r3, r0
     3bc:	e59f40e0 	ldr	r4, [pc, #224]	; 4a4 <MC_TABLE_SIZE+0xa4>
     3c0:	e24dd020 	sub	sp, sp, #32
     3c4:	e5932010 	ldr	r2, [r3, #16]
     3c8:	e59f10d8 	ldr	r1, [pc, #216]	; 4a8 <MC_TABLE_SIZE+0xa8>
     3cc:	e3a00001 	mov	r0, #1
     3d0:	eb0000a9 	bl	67c <printfMessageLevel>
     3d4:	e5940000 	ldr	r0, [r4]
     3d8:	eb000168 	bl	980 <createEvent>
     3dc:	e3a01000 	mov	r1, #0
     3e0:	e3a02008 	mov	r2, #8
     3e4:	e1a05000 	mov	r5, r0
     3e8:	e1a0000d 	mov	r0, sp
     3ec:	eb0000be 	bl	6ec <memsetWrapper>
     3f0:	e5943000 	ldr	r3, [r4]
     3f4:	e1a0000d 	mov	r0, sp
     3f8:	e58d3004 	str	r3, [sp, #4]
     3fc:	e58d5000 	str	r5, [sp]
     400:	eb000114 	bl	858 <createObj>
     404:	e59f30a0 	ldr	r3, [pc, #160]	; 4ac <MC_TABLE_SIZE+0xac>
     408:	e5942000 	ldr	r2, [r4]
     40c:	e59f109c 	ldr	r1, [pc, #156]	; 4b0 <MC_TABLE_SIZE+0xb0>
     410:	e5803014 	str	r3, [r0, #20]
     414:	e59f3098 	ldr	r3, [pc, #152]	; 4b4 <MC_TABLE_SIZE+0xb4>
     418:	e1a05000 	mov	r5, r0
     41c:	e5803018 	str	r3, [r0, #24]
     420:	e3a00001 	mov	r0, #1
     424:	eb000094 	bl	67c <printfMessageLevel>
     428:	e5943000 	ldr	r3, [r4]
     42c:	e59f1084 	ldr	r1, [pc, #132]	; 4b8 <MC_TABLE_SIZE+0xb8>
     430:	e2833001 	add	r3, r3, #1
     434:	e5843000 	str	r3, [r4]
     438:	e59f407c 	ldr	r4, [pc, #124]	; 4bc <MC_TABLE_SIZE+0xbc>
     43c:	e3a00001 	mov	r0, #1
     440:	e5942000 	ldr	r2, [r4]
     444:	eb00008c 	bl	67c <printfMessageLevel>
     448:	e5940000 	ldr	r0, [r4]
     44c:	eb0000ad 	bl	708 <GetRandNumberRange>
     450:	e3a01003 	mov	r1, #3
     454:	eb000543 	bl	1968 <__aeabi_uidiv>
     458:	e59f1060 	ldr	r1, [pc, #96]	; 4c0 <MC_TABLE_SIZE+0xc0>
     45c:	e1a06000 	mov	r6, r0
     460:	e1a02006 	mov	r2, r6
     464:	e3a00001 	mov	r0, #1
     468:	eb000083 	bl	67c <printfMessageLevel>
     46c:	e59f3050 	ldr	r3, [pc, #80]	; 4c4 <MC_TABLE_SIZE+0xc4>
     470:	e5942000 	ldr	r2, [r4]
     474:	e5933000 	ldr	r3, [r3]
     478:	e58d2014 	str	r2, [sp, #20]
     47c:	e58d3018 	str	r3, [sp, #24]
     480:	e58d301c 	str	r3, [sp, #28]
     484:	e58d6010 	str	r6, [sp, #16]
     488:	e5953018 	ldr	r3, [r5, #24]
     48c:	e59f0034 	ldr	r0, [pc, #52]	; 4c8 <MC_TABLE_SIZE+0xc8>
     490:	e1a01005 	mov	r1, r5
     494:	e28d2008 	add	r2, sp, #8
     498:	e12fff33 	blx	r3
     49c:	e28dd020 	add	sp, sp, #32
     4a0:	e8bd8070 	pop	{r4, r5, r6, pc}
     4a4:	00400000 	.word	0x00400000
     4a8:	00001a98 	.word	0x00001a98
     4ac:	000003b4 	.word	0x000003b4
     4b0:	00001ac7 	.word	0x00001ac7
     4b4:	000009c4 	.word	0x000009c4
     4b8:	00001cf1 	.word	0x00001cf1
     4bc:	00400348 	.word	0x00400348
     4c0:	00001af5 	.word	0x00001af5
     4c4:	0040033c 	.word	0x0040033c
     4c8:	00400340 	.word	0x00400340

000004cc <c_main>:
     4cc:	e92d4030 	push	{r4, r5, lr}
     4d0:	e24dd044 	sub	sp, sp, #68	; 0x44
     4d4:	e59f3150 	ldr	r3, [pc, #336]	; 62c <ETH_TX_SIZE+0x2c>
     4d8:	e3a020c8 	mov	r2, #200	; 0xc8
     4dc:	e28d101c 	add	r1, sp, #28
     4e0:	e3a00000 	mov	r0, #0
     4e4:	e58d3024 	str	r3, [sp, #36]	; 0x24
     4e8:	e58d201c 	str	r2, [sp, #28]
     4ec:	e58d3020 	str	r3, [sp, #32]
     4f0:	eb00009e 	bl	770 <createSimTimebase>
     4f4:	e59f3134 	ldr	r3, [pc, #308]	; 630 <ETH_TX_SIZE+0x30>
     4f8:	e59f2134 	ldr	r2, [pc, #308]	; 634 <ETH_TX_SIZE+0x34>
     4fc:	e3a05000 	mov	r5, #0
     500:	e5830000 	str	r0, [r3]
     504:	e5903008 	ldr	r3, [r0, #8]
     508:	e5823000 	str	r3, [r2]
     50c:	e58d0014 	str	r0, [sp, #20]
     510:	e3a02003 	mov	r2, #3
     514:	e58d0038 	str	r0, [sp, #56]	; 0x38
     518:	e58d003c 	str	r0, [sp, #60]	; 0x3c
     51c:	e3a00000 	mov	r0, #0
     520:	e58d3010 	str	r3, [sp, #16]
     524:	e58d3034 	str	r3, [sp, #52]	; 0x34
     528:	e58d2030 	str	r2, [sp, #48]	; 0x30
     52c:	eb000113 	bl	980 <createEvent>
     530:	e59f1100 	ldr	r1, [pc, #256]	; 638 <ETH_TX_SIZE+0x38>
     534:	e1a04000 	mov	r4, r0
     538:	e1a02004 	mov	r2, r4
     53c:	e3a00000 	mov	r0, #0
     540:	eb00004d 	bl	67c <printfMessageLevel>
     544:	e5942000 	ldr	r2, [r4]
     548:	e3a00000 	mov	r0, #0
     54c:	e59f10e8 	ldr	r1, [pc, #232]	; 63c <ETH_TX_SIZE+0x3c>
     550:	eb000049 	bl	67c <printfMessageLevel>
     554:	e3a01000 	mov	r1, #0
     558:	e3a02008 	mov	r2, #8
     55c:	e28d0008 	add	r0, sp, #8
     560:	eb000061 	bl	6ec <memsetWrapper>
     564:	e28d0008 	add	r0, sp, #8
     568:	e58d500c 	str	r5, [sp, #12]
     56c:	e58d4008 	str	r4, [sp, #8]
     570:	eb0000b8 	bl	858 <createObj>
     574:	e59f30c4 	ldr	r3, [pc, #196]	; 640 <ETH_TX_SIZE+0x40>
     578:	e59f10c4 	ldr	r1, [pc, #196]	; 644 <ETH_TX_SIZE+0x44>
     57c:	e1a04000 	mov	r4, r0
     580:	e5803014 	str	r3, [r0, #20]
     584:	e59f30bc 	ldr	r3, [pc, #188]	; 648 <ETH_TX_SIZE+0x48>
     588:	e5803018 	str	r3, [r0, #24]
     58c:	e1a02004 	mov	r2, r4
     590:	e1a00005 	mov	r0, r5
     594:	eb000038 	bl	67c <printfMessageLevel>
     598:	e1a00005 	mov	r0, r5
     59c:	e59f10a8 	ldr	r1, [pc, #168]	; 64c <ETH_TX_SIZE+0x4c>
     5a0:	e5942010 	ldr	r2, [r4, #16]
     5a4:	eb000034 	bl	67c <printfMessageLevel>
     5a8:	e59f00a0 	ldr	r0, [pc, #160]	; 650 <ETH_TX_SIZE+0x50>
     5ac:	eb0000c2 	bl	8bc <objInitListHead>
     5b0:	e59f0098 	ldr	r0, [pc, #152]	; 650 <ETH_TX_SIZE+0x50>
     5b4:	eb0000df 	bl	938 <DumpObjElements>
     5b8:	e3a0501e 	mov	r5, #30
     5bc:	e3a000c8 	mov	r0, #200	; 0xc8
     5c0:	eb000050 	bl	708 <GetRandNumberRange>
     5c4:	e59f1088 	ldr	r1, [pc, #136]	; 654 <ETH_TX_SIZE+0x54>
     5c8:	e1a02000 	mov	r2, r0
     5cc:	e3a00000 	mov	r0, #0
     5d0:	eb000029 	bl	67c <printfMessageLevel>
     5d4:	e2555001 	subs	r5, r5, #1
     5d8:	1afffff7 	bne	5bc <SPARE_SIZE+0x1c>
     5dc:	e5943018 	ldr	r3, [r4, #24]
     5e0:	e1a01004 	mov	r1, r4
     5e4:	e28d2028 	add	r2, sp, #40	; 0x28
     5e8:	e59f0060 	ldr	r0, [pc, #96]	; 650 <ETH_TX_SIZE+0x50>
     5ec:	e12fff33 	blx	r3
     5f0:	e3a02004 	mov	r2, #4
     5f4:	e28d0004 	add	r0, sp, #4
     5f8:	e1a01005 	mov	r1, r5
     5fc:	eb00003a 	bl	6ec <memsetWrapper>
     600:	e28d1010 	add	r1, sp, #16
     604:	e59f0044 	ldr	r0, [pc, #68]	; 650 <ETH_TX_SIZE+0x50>
     608:	eb00012d 	bl	ac4 <RunDiscreteEventSimulation>
     60c:	e59f301c 	ldr	r3, [pc, #28]	; 630 <ETH_TX_SIZE+0x30>
     610:	e5930000 	ldr	r0, [r3]
     614:	eb000080 	bl	81c <destroySimTimebase>
     618:	e3a00001 	mov	r0, #1
     61c:	e59f1034 	ldr	r1, [pc, #52]	; 658 <ETH_TX_SIZE+0x58>
     620:	eb000015 	bl	67c <printfMessageLevel>
     624:	e28dd044 	add	sp, sp, #68	; 0x44
     628:	e8bd8030 	pop	{r4, r5, pc}
     62c:	000f4240 	.word	0x000f4240
     630:	0040033c 	.word	0x0040033c
     634:	00400348 	.word	0x00400348
     638:	00001b16 	.word	0x00001b16
     63c:	00001b29 	.word	0x00001b29
     640:	000003b4 	.word	0x000003b4
     644:	00001b37 	.word	0x00001b37
     648:	000009c4 	.word	0x000009c4
     64c:	00001b4b 	.word	0x00001b4b
     650:	00400340 	.word	0x00400340
     654:	00001b5a 	.word	0x00001b5a
     658:	00001b74 	.word	0x00001b74

0000065c <printfMessage>:
     65c:	e92d000f 	push	{r0, r1, r2, r3}
     660:	e92d4008 	push	{r3, lr}
     664:	e3a00002 	mov	r0, #2
     668:	e59d1008 	ldr	r1, [sp, #8]
     66c:	fa0003d9 	blx	15d8 <io_printf>
     670:	e8bd4008 	pop	{r3, lr}
     674:	e28dd010 	add	sp, sp, #16
     678:	e12fff1e 	bx	lr

0000067c <printfMessageLevel>:
     67c:	e92d000e 	push	{r1, r2, r3}
     680:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     684:	e59d0004 	ldr	r0, [sp, #4]
     688:	ebfffff3 	bl	65c <printfMessage>
     68c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     690:	e28dd00c 	add	sp, sp, #12
     694:	e12fff1e 	bx	lr

00000698 <assertAction>:
     698:	e12fff1e 	bx	lr

0000069c <mallocWrapper>:
     69c:	e92d4010 	push	{r4, lr}
     6a0:	fb000483 	blx	18b6 <spin1_malloc>
     6a4:	e2504000 	subs	r4, r0, #0
     6a8:	1a000001 	bne	6b4 <ZI_LENGTH+0xc>
     6ac:	e59f0008 	ldr	r0, [pc, #8]	; 6bc <ZI_LENGTH+0x14>
     6b0:	ebffffe9 	bl	65c <printfMessage>
     6b4:	e1a00004 	mov	r0, r4
     6b8:	e8bd8010 	pop	{r4, pc}
     6bc:	00001b9c 	.word	0x00001b9c

000006c0 <freeWrapper>:
     6c0:	e3500000 	cmp	r0, #0
     6c4:	e92d4008 	push	{r3, lr}
     6c8:	1a000003 	bne	6dc <freeWrapper+0x1c>
     6cc:	e59f0014 	ldr	r0, [pc, #20]	; 6e8 <freeWrapper+0x28>
     6d0:	ebffffe1 	bl	65c <printfMessage>
     6d4:	e3a00001 	mov	r0, #1
     6d8:	e8bd8008 	pop	{r3, pc}
     6dc:	fa000477 	blx	18c0 <spin1_free>
     6e0:	e3a00000 	mov	r0, #0
     6e4:	e8bd8008 	pop	{r3, pc}
     6e8:	00001bb6 	.word	0x00001bb6

000006ec <memsetWrapper>:
     6ec:	e12fff1e 	bx	lr

000006f0 <memcpyWrapper>:
     6f0:	e92d4008 	push	{r3, lr}
     6f4:	fa00046a 	blx	18a4 <spin1_memcpy>
     6f8:	e3a00000 	mov	r0, #0
     6fc:	e8bd8008 	pop	{r3, pc}

00000700 <SetRandNumberSeed>:
     700:	ea0004e2 	b	1a90 <__spin1_srand_from_arm>

00000704 <GetRandNumber>:
     704:	ea0004df 	b	1a88 <__spin1_rand_from_arm>

00000708 <GetRandNumberRange>:
     708:	e92d4038 	push	{r3, r4, r5, lr}
     70c:	e1a04000 	mov	r4, r0
     710:	e1a01004 	mov	r1, r4
     714:	e3e00102 	mvn	r0, #-2147483648	; 0x80000000
     718:	eb000492 	bl	1968 <__aeabi_uidiv>
     71c:	e3540102 	cmp	r4, #-2147483648	; 0x80000000
     720:	10050094 	mulne	r5, r4, r0
     724:	1a000001 	bne	730 <GetRandNumberRange+0x28>
     728:	e8bd4038 	pop	{r3, r4, r5, lr}
     72c:	ea0004d5 	b	1a88 <__spin1_rand_from_arm>
     730:	fa000457 	blx	1894 <spin1_rand>
     734:	e1500005 	cmp	r0, r5
     738:	2afffffc 	bcs	730 <GetRandNumberRange+0x28>
     73c:	e1a01004 	mov	r1, r4
     740:	eb0004c5 	bl	1a5c <__aeabi_uidivmod>
     744:	e1a00001 	mov	r0, r1
     748:	e8bd8038 	pop	{r3, r4, r5, pc}

0000074c <GetSystemClock>:
     74c:	e3a00000 	mov	r0, #0
     750:	e12fff1e 	bx	lr

00000754 <sleepWrapper>:
     754:	e12fff1e 	bx	lr

00000758 <highResolutionSleepWrapper>:
     758:	e12fff1e 	bx	lr

0000075c <getTimeWrapper>:
     75c:	e12fff1e 	bx	lr

00000760 <delayWrapper>:
     760:	e59f3004 	ldr	r3, [pc, #4]	; 76c <delayWrapper+0xc>
     764:	e0000093 	mul	r0, r3, r0
     768:	ea0004c4 	b	1a80 <__spin1_delay_us_from_arm>
     76c:	000f4240 	.word	0x000f4240

00000770 <createSimTimebase>:
     770:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
     774:	e1a06000 	mov	r6, r0
     778:	e1a05001 	mov	r5, r1
     77c:	e5910008 	ldr	r0, [r1, #8]
     780:	e5911004 	ldr	r1, [r1, #4]
     784:	eb000477 	bl	1968 <__aeabi_uidiv>
     788:	e2504000 	subs	r4, r0, #0
     78c:	0a00001b 	beq	800 <STACK_SIZE>
     790:	e3a00018 	mov	r0, #24
     794:	ebffffc0 	bl	69c <mallocWrapper>
     798:	e2504000 	subs	r4, r0, #0
     79c:	1a000000 	bne	7a4 <createSimTimebase+0x34>
     7a0:	ebffffbc 	bl	698 <assertAction>
     7a4:	e3a02018 	mov	r2, #24
     7a8:	e1a00004 	mov	r0, r4
     7ac:	e3a01000 	mov	r1, #0
     7b0:	ebffffcd 	bl	6ec <memsetWrapper>
     7b4:	e5951004 	ldr	r1, [r5, #4]
     7b8:	e5950008 	ldr	r0, [r5, #8]
     7bc:	e5846000 	str	r6, [r4]
     7c0:	eb000468 	bl	1968 <__aeabi_uidiv>
     7c4:	e5956000 	ldr	r6, [r5]
     7c8:	e59f1044 	ldr	r1, [pc, #68]	; 814 <STACK_SIZE+0x14>
     7cc:	e0020096 	mul	r2, r6, r0
     7d0:	e1a03000 	mov	r3, r0
     7d4:	e5842008 	str	r2, [r4, #8]
     7d8:	e3a00001 	mov	r0, #1
     7dc:	e58d6000 	str	r6, [sp]
     7e0:	ebffffa5 	bl	67c <printfMessageLevel>
     7e4:	e3a03000 	mov	r3, #0
     7e8:	e5843004 	str	r3, [r4, #4]
     7ec:	e284000c 	add	r0, r4, #12
     7f0:	e1a01005 	mov	r1, r5
     7f4:	e3a0200c 	mov	r2, #12
     7f8:	ebffffbc 	bl	6f0 <memcpyWrapper>
     7fc:	ea000002 	b	80c <STACK_SIZE+0xc>
     800:	e3a00002 	mov	r0, #2
     804:	e59f100c 	ldr	r1, [pc, #12]	; 818 <STACK_SIZE+0x18>
     808:	ebffff9b 	bl	67c <printfMessageLevel>
     80c:	e1a00004 	mov	r0, r4
     810:	e8bd807c 	pop	{r2, r3, r4, r5, r6, pc}
     814:	00001bd3 	.word	0x00001bd3
     818:	00001c29 	.word	0x00001c29

0000081c <destroySimTimebase>:
     81c:	eaffffa7 	b	6c0 <freeWrapper>

00000820 <incSimTimebaseTick>:
     820:	e5903004 	ldr	r3, [r0, #4]
     824:	e2833001 	add	r3, r3, #1
     828:	e5803004 	str	r3, [r0, #4]
     82c:	e12fff1e 	bx	lr

00000830 <GetSimTimebaseTick>:
     830:	e5900004 	ldr	r0, [r0, #4]
     834:	e12fff1e 	bx	lr

00000838 <getTimebaseSetting>:
     838:	e280300c 	add	r3, r0, #12
     83c:	e3a0200c 	mov	r2, #12
     840:	e1a00001 	mov	r0, r1
     844:	e1a01003 	mov	r1, r3
     848:	eaffffa8 	b	6f0 <memcpyWrapper>

0000084c <setTimbaseSetting>:
     84c:	e280000c 	add	r0, r0, #12
     850:	e3a0200c 	mov	r2, #12
     854:	eaffffa5 	b	6f0 <memcpyWrapper>

00000858 <createObj>:
     858:	e92d4038 	push	{r3, r4, r5, lr}
     85c:	e1a05000 	mov	r5, r0
     860:	e3a0001c 	mov	r0, #28
     864:	ebffff8c 	bl	69c <mallocWrapper>
     868:	e2504000 	subs	r4, r0, #0
     86c:	0a000006 	beq	88c <createObj+0x34>
     870:	e3a01000 	mov	r1, #0
     874:	e3a0201c 	mov	r2, #28
     878:	ebffff9b 	bl	6ec <memsetWrapper>
     87c:	e284000c 	add	r0, r4, #12
     880:	e1a01005 	mov	r1, r5
     884:	e3a02008 	mov	r2, #8
     888:	ebffff98 	bl	6f0 <memcpyWrapper>
     88c:	e1a00004 	mov	r0, r4
     890:	e8bd8038 	pop	{r3, r4, r5, pc}

00000894 <freeObj>:
     894:	e92d4008 	push	{r3, lr}
     898:	ebffff88 	bl	6c0 <freeWrapper>
     89c:	e2900000 	adds	r0, r0, #0
     8a0:	13a00001 	movne	r0, #1
     8a4:	e8bd8008 	pop	{r3, pc}

000008a8 <objAttachEvent>:
     8a8:	e580100c 	str	r1, [r0, #12]
     8ac:	e12fff1e 	bx	lr

000008b0 <objDetachEvent>:
     8b0:	e3a03000 	mov	r3, #0
     8b4:	e580300c 	str	r3, [r0, #12]
     8b8:	e12fff1e 	bx	lr

000008bc <objInitListHead>:
     8bc:	e3a03000 	mov	r3, #0
     8c0:	e5803000 	str	r3, [r0]
     8c4:	e5803004 	str	r3, [r0, #4]
     8c8:	e12fff1e 	bx	lr

000008cc <objEnque>:
     8cc:	e5903004 	ldr	r3, [r0, #4]
     8d0:	e3a02000 	mov	r2, #0
     8d4:	e3530000 	cmp	r3, #0
     8d8:	15831000 	strne	r1, [r3]
     8dc:	05801000 	streq	r1, [r0]
     8e0:	e5810008 	str	r0, [r1, #8]
     8e4:	e881000c 	stm	r1, {r2, r3}
     8e8:	e5801004 	str	r1, [r0, #4]
     8ec:	e12fff1e 	bx	lr

000008f0 <objDeque>:
     8f0:	e92d4038 	push	{r3, r4, r5, lr}
     8f4:	e1a05000 	mov	r5, r0
     8f8:	e5910008 	ldr	r0, [r1, #8]
     8fc:	e1a04001 	mov	r4, r1
     900:	e0503005 	subs	r3, r0, r5
     904:	e2730000 	rsbs	r0, r3, #0
     908:	e0b00003 	adcs	r0, r0, r3
     90c:	ebffff61 	bl	698 <assertAction>
     910:	e5943000 	ldr	r3, [r4]
     914:	e5942004 	ldr	r2, [r4, #4]
     918:	e3530000 	cmp	r3, #0
     91c:	15832004 	strne	r2, [r3, #4]
     920:	05852004 	streq	r2, [r5, #4]
     924:	e5942004 	ldr	r2, [r4, #4]
     928:	e3520000 	cmp	r2, #0
     92c:	15823000 	strne	r3, [r2]
     930:	05853000 	streq	r3, [r5]
     934:	e8bd8038 	pop	{r3, r4, r5, pc}

00000938 <DumpObjElements>:
     938:	e92d4010 	push	{r4, lr}
     93c:	e5904000 	ldr	r4, [r0]
     940:	e3540000 	cmp	r4, #0
     944:	1a000003 	bne	958 <DumpObjElements+0x20>
     948:	e3a00001 	mov	r0, #1
     94c:	e59f1024 	ldr	r1, [pc, #36]	; 978 <DumpObjElements+0x40>
     950:	e8bd4010 	pop	{r4, lr}
     954:	eaffff48 	b	67c <printfMessageLevel>
     958:	e5942010 	ldr	r2, [r4, #16]
     95c:	e3a00001 	mov	r0, #1
     960:	e59f1014 	ldr	r1, [pc, #20]	; 97c <DumpObjElements+0x44>
     964:	ebffff44 	bl	67c <printfMessageLevel>
     968:	e5944000 	ldr	r4, [r4]
     96c:	e3540000 	cmp	r4, #0
     970:	1afffff8 	bne	958 <DumpObjElements+0x20>
     974:	e8bd8010 	pop	{r4, pc}
     978:	00001c40 	.word	0x00001c40
     97c:	00001c5d 	.word	0x00001c5d

00000980 <createEvent>:
     980:	e92d4038 	push	{r3, r4, r5, lr}
     984:	e1a05000 	mov	r5, r0
     988:	e3a0000c 	mov	r0, #12
     98c:	ebffff42 	bl	69c <mallocWrapper>
     990:	e2504000 	subs	r4, r0, #0
     994:	0a000003 	beq	9a8 <createEvent+0x28>
     998:	e3a01000 	mov	r1, #0
     99c:	e3a0200c 	mov	r2, #12
     9a0:	ebffff51 	bl	6ec <memsetWrapper>
     9a4:	e5845000 	str	r5, [r4]
     9a8:	e1a00004 	mov	r0, r4
     9ac:	e8bd8038 	pop	{r3, r4, r5, pc}

000009b0 <deleteEvent>:
     9b0:	e92d4008 	push	{r3, lr}
     9b4:	ebffff41 	bl	6c0 <freeWrapper>
     9b8:	e2900000 	adds	r0, r0, #0
     9bc:	13a00001 	movne	r0, #1
     9c0:	e8bd8008 	pop	{r3, pc}

000009c4 <objSchedulerFunc>:
     9c4:	e3500000 	cmp	r0, #0
     9c8:	13510000 	cmpne	r1, #0
     9cc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     9d0:	e1a04002 	mov	r4, r2
     9d4:	e1a05001 	mov	r5, r1
     9d8:	e1a06000 	mov	r6, r0
     9dc:	0a000004 	beq	9f4 <objSchedulerFunc+0x30>
     9e0:	e591300c 	ldr	r3, [r1, #12]
     9e4:	e3530000 	cmp	r3, #0
     9e8:	0a000001 	beq	9f4 <objSchedulerFunc+0x30>
     9ec:	e3520000 	cmp	r2, #0
     9f0:	1a000003 	bne	a04 <objSchedulerFunc+0x40>
     9f4:	e59f00ac 	ldr	r0, [pc, #172]	; aa8 <objSchedulerFunc+0xe4>
     9f8:	ebffff17 	bl	65c <printfMessage>
     9fc:	e3a00000 	mov	r0, #0
     a00:	ebffff24 	bl	698 <assertAction>
     a04:	e5942008 	ldr	r2, [r4, #8]
     a08:	e594300c 	ldr	r3, [r4, #12]
     a0c:	e1520003 	cmp	r2, r3
     a10:	9a00000b 	bls	a44 <objSchedulerFunc+0x80>
     a14:	e3a00002 	mov	r0, #2
     a18:	e59f108c 	ldr	r1, [pc, #140]	; aac <objSchedulerFunc+0xe8>
     a1c:	ebffff16 	bl	67c <printfMessageLevel>
     a20:	e5942008 	ldr	r2, [r4, #8]
     a24:	e3a00002 	mov	r0, #2
     a28:	e59f1080 	ldr	r1, [pc, #128]	; ab0 <objSchedulerFunc+0xec>
     a2c:	ebffff12 	bl	67c <printfMessageLevel>
     a30:	e3a00002 	mov	r0, #2
     a34:	e59f1078 	ldr	r1, [pc, #120]	; ab4 <objSchedulerFunc+0xf0>
     a38:	e594200c 	ldr	r2, [r4, #12]
     a3c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     a40:	eaffff0d 	b	67c <printfMessageLevel>
     a44:	e5940014 	ldr	r0, [r4, #20]
     a48:	e595700c 	ldr	r7, [r5, #12]
     a4c:	ebffff77 	bl	830 <GetSimTimebaseTick>
     a50:	e5943008 	ldr	r3, [r4, #8]
     a54:	e5952010 	ldr	r2, [r5, #16]
     a58:	e59f1058 	ldr	r1, [pc, #88]	; ab8 <objSchedulerFunc+0xf4>
     a5c:	e0800003 	add	r0, r0, r3
     a60:	e5870008 	str	r0, [r7, #8]
     a64:	e3a00001 	mov	r0, #1
     a68:	ebffff03 	bl	67c <printfMessageLevel>
     a6c:	e5940014 	ldr	r0, [r4, #20]
     a70:	ebffff6e 	bl	830 <GetSimTimebaseTick>
     a74:	e59f1040 	ldr	r1, [pc, #64]	; abc <objSchedulerFunc+0xf8>
     a78:	e1a02000 	mov	r2, r0
     a7c:	e3a00001 	mov	r0, #1
     a80:	ebfffefd 	bl	67c <printfMessageLevel>
     a84:	e595300c 	ldr	r3, [r5, #12]
     a88:	e3a00001 	mov	r0, #1
     a8c:	e59f102c 	ldr	r1, [pc, #44]	; ac0 <objSchedulerFunc+0xfc>
     a90:	e5932008 	ldr	r2, [r3, #8]
     a94:	ebfffef8 	bl	67c <printfMessageLevel>
     a98:	e1a00006 	mov	r0, r6
     a9c:	e1a01005 	mov	r1, r5
     aa0:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     aa4:	eaffff88 	b	8cc <objEnque>
     aa8:	00001c83 	.word	0x00001c83
     aac:	00001ca1 	.word	0x00001ca1
     ab0:	00001cd0 	.word	0x00001cd0
     ab4:	00001ceb 	.word	0x00001ceb
     ab8:	00001d09 	.word	0x00001d09
     abc:	00001d2f 	.word	0x00001d2f
     ac0:	00001d5c 	.word	0x00001d5c

00000ac4 <RunDiscreteEventSimulation>:
     ac4:	eaffffff 	b	ac8 <RunDiscreteEventSimulationPriv>

00000ac8 <RunDiscreteEventSimulationPriv>:
     ac8:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     acc:	e1a06000 	mov	r6, r0
     ad0:	e1a05001 	mov	r5, r1
     ad4:	ebffff97 	bl	938 <DumpObjElements>
     ad8:	e5964000 	ldr	r4, [r6]
     adc:	ea000027 	b	b80 <RunDiscreteEventSimulationPriv+0xb8>
     ae0:	e594700c 	ldr	r7, [r4, #12]
     ae4:	e5953000 	ldr	r3, [r5]
     ae8:	e5972008 	ldr	r2, [r7, #8]
     aec:	e1520003 	cmp	r2, r3
     af0:	9a000004 	bls	b08 <RunDiscreteEventSimulationPriv+0x40>
     af4:	e3a00001 	mov	r0, #1
     af8:	e59f10a8 	ldr	r1, [pc, #168]	; ba8 <RunDiscreteEventSimulationPriv+0xe0>
     afc:	e5972000 	ldr	r2, [r7]
     b00:	ebfffedd 	bl	67c <printfMessageLevel>
     b04:	ea000012 	b	b54 <RunDiscreteEventSimulationPriv+0x8c>
     b08:	e5950004 	ldr	r0, [r5, #4]
     b0c:	ebffff47 	bl	830 <GetSimTimebaseTick>
     b10:	e5953000 	ldr	r3, [r5]
     b14:	e58d3000 	str	r3, [sp]
     b18:	e59f108c 	ldr	r1, [pc, #140]	; bac <RunDiscreteEventSimulationPriv+0xe4>
     b1c:	e5973008 	ldr	r3, [r7, #8]
     b20:	e1a02000 	mov	r2, r0
     b24:	e3a00001 	mov	r0, #1
     b28:	ebfffed3 	bl	67c <printfMessageLevel>
     b2c:	e5950004 	ldr	r0, [r5, #4]
     b30:	ebffff3e 	bl	830 <GetSimTimebaseTick>
     b34:	e5973008 	ldr	r3, [r7, #8]
     b38:	e1500003 	cmp	r0, r3
     b3c:	3a00000e 	bcc	b7c <RunDiscreteEventSimulationPriv+0xb4>
     b40:	e5943014 	ldr	r3, [r4, #20]
     b44:	e3530000 	cmp	r3, #0
     b48:	0a00000b 	beq	b7c <RunDiscreteEventSimulationPriv+0xb4>
     b4c:	e1a00004 	mov	r0, r4
     b50:	e12fff33 	blx	r3
     b54:	e1a01004 	mov	r1, r4
     b58:	e1a00006 	mov	r0, r6
     b5c:	ebffff63 	bl	8f0 <objDeque>
     b60:	e1a00006 	mov	r0, r6
     b64:	ebffff73 	bl	938 <DumpObjElements>
     b68:	e594000c 	ldr	r0, [r4, #12]
     b6c:	ebfffed3 	bl	6c0 <freeWrapper>
     b70:	e1a00004 	mov	r0, r4
     b74:	ebfffed1 	bl	6c0 <freeWrapper>
     b78:	ea000002 	b	b88 <RunDiscreteEventSimulationPriv+0xc0>
     b7c:	e5944000 	ldr	r4, [r4]
     b80:	e3540000 	cmp	r4, #0
     b84:	1affffd5 	bne	ae0 <RunDiscreteEventSimulationPriv+0x18>
     b88:	e5950004 	ldr	r0, [r5, #4]
     b8c:	ebffff23 	bl	820 <incSimTimebaseTick>
     b90:	e5950004 	ldr	r0, [r5, #4]
     b94:	ebffff25 	bl	830 <GetSimTimebaseTick>
     b98:	e5953000 	ldr	r3, [r5]
     b9c:	e1500003 	cmp	r0, r3
     ba0:	3affffcc 	bcc	ad8 <RunDiscreteEventSimulationPriv+0x10>
     ba4:	e8bd80fe 	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     ba8:	00001d82 	.word	0x00001d82
     bac:	00001dcd 	.word	0x00001dcd

00000bb0 <rte_handler>:
     bb0:	4b01      	ldr	r3, [pc, #4]	; (bb8 <rte_handler+0x8>)
     bb2:	2208      	movs	r2, #8
     bb4:	701a      	strb	r2, [r3, #0]
     bb6:	4770      	bx	lr
     bb8:	e5007f2b 	.word	0xe5007f2b

00000bbc <sark_cpu_state>:
     bbc:	4b02      	ldr	r3, [pc, #8]	; (bc8 <sark_cpu_state+0xc>)
     bbe:	69db      	ldr	r3, [r3, #28]
     bc0:	332e      	adds	r3, #46	; 0x2e
     bc2:	7018      	strb	r0, [r3, #0]
     bc4:	4770      	bx	lr
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	0040034c 	.word	0x0040034c

00000bcc <sark_app_lead>:
     bcc:	235c      	movs	r3, #92	; 0x5c
     bce:	4a03      	ldr	r2, [pc, #12]	; (bdc <sark_app_lead+0x10>)
     bd0:	781b      	ldrb	r3, [r3, #0]
     bd2:	6812      	ldr	r2, [r2, #0]
     bd4:	00db      	lsls	r3, r3, #3
     bd6:	18d3      	adds	r3, r2, r3
     bd8:	78d8      	ldrb	r0, [r3, #3]
     bda:	4770      	bx	lr
     bdc:	e5007fe4 	.word	0xe5007fe4

00000be0 <sark_block_init>:
     be0:	b530      	push	{r4, r5, lr}
     be2:	1c0b      	adds	r3, r1, #0
     be4:	1c04      	adds	r4, r0, #0
     be6:	e002      	b.n	bee <sark_block_init+0xe>
     be8:	18a5      	adds	r5, r4, r2
     bea:	6025      	str	r5, [r4, #0]
     bec:	1c2c      	adds	r4, r5, #0
     bee:	3b01      	subs	r3, #1
     bf0:	2b00      	cmp	r3, #0
     bf2:	d1f9      	bne.n	be8 <sark_block_init+0x8>
     bf4:	3901      	subs	r1, #1
     bf6:	434a      	muls	r2, r1
     bf8:	1880      	adds	r0, r0, r2
     bfa:	6003      	str	r3, [r0, #0]
     bfc:	bd30      	pop	{r4, r5, pc}
	...

00000c00 <sark_msg_get>:
     c00:	b510      	push	{r4, lr}
     c02:	f7ff ead2 	blx	1a8 <cpu_int_disable>
     c06:	4b09      	ldr	r3, [pc, #36]	; (c2c <ETH_RX_SIZE+0x2c>)
     c08:	6a1c      	ldr	r4, [r3, #32]
     c0a:	2c00      	cmp	r4, #0
     c0c:	d00a      	beq.n	c24 <sark_msg_get+0x24>
     c0e:	6822      	ldr	r2, [r4, #0]
     c10:	621a      	str	r2, [r3, #32]
     c12:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
     c14:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
     c16:	3201      	adds	r2, #1
     c18:	0412      	lsls	r2, r2, #16
     c1a:	0c12      	lsrs	r2, r2, #16
     c1c:	849a      	strh	r2, [r3, #36]	; 0x24
     c1e:	4291      	cmp	r1, r2
     c20:	d200      	bcs.n	c24 <sark_msg_get+0x24>
     c22:	84da      	strh	r2, [r3, #38]	; 0x26
     c24:	f7ff eac8 	blx	1b8 <cpu_int_restore>
     c28:	1c20      	adds	r0, r4, #0
     c2a:	bd10      	pop	{r4, pc}
     c2c:	0040034c 	.word	0x0040034c

00000c30 <sark_msg_free>:
     c30:	b510      	push	{r4, lr}
     c32:	1c04      	adds	r4, r0, #0
     c34:	f7ff eab8 	blx	1a8 <cpu_int_disable>
     c38:	4b04      	ldr	r3, [pc, #16]	; (c4c <sark_msg_free+0x1c>)
     c3a:	6a1a      	ldr	r2, [r3, #32]
     c3c:	6022      	str	r2, [r4, #0]
     c3e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
     c40:	621c      	str	r4, [r3, #32]
     c42:	3a01      	subs	r2, #1
     c44:	849a      	strh	r2, [r3, #36]	; 0x24
     c46:	f7ff eab8 	blx	1b8 <cpu_int_restore>
     c4a:	bd10      	pop	{r4, pc}
     c4c:	0040034c 	.word	0x0040034c

00000c50 <sark_shmsg_get>:
     c50:	b510      	push	{r4, lr}
     c52:	2000      	movs	r0, #0
     c54:	f7ff eab8 	blx	1c8 <sark_lock_get>
     c58:	4b09      	ldr	r3, [pc, #36]	; (c80 <sark_shmsg_get+0x30>)
     c5a:	681c      	ldr	r4, [r3, #0]
     c5c:	2c00      	cmp	r4, #0
     c5e:	d00a      	beq.n	c76 <sark_shmsg_get+0x26>
     c60:	6822      	ldr	r2, [r4, #0]
     c62:	601a      	str	r2, [r3, #0]
     c64:	889a      	ldrh	r2, [r3, #4]
     c66:	88d9      	ldrh	r1, [r3, #6]
     c68:	3201      	adds	r2, #1
     c6a:	0412      	lsls	r2, r2, #16
     c6c:	0c12      	lsrs	r2, r2, #16
     c6e:	809a      	strh	r2, [r3, #4]
     c70:	4291      	cmp	r1, r2
     c72:	d200      	bcs.n	c76 <sark_shmsg_get+0x26>
     c74:	80da      	strh	r2, [r3, #6]
     c76:	2100      	movs	r1, #0
     c78:	f7ff eab8 	blx	1ec <sark_lock_free>
     c7c:	1c20      	adds	r0, r4, #0
     c7e:	bd10      	pop	{r4, pc}
     c80:	e5007f68 	.word	0xe5007f68

00000c84 <sark_shmsg_free>:
     c84:	b510      	push	{r4, lr}
     c86:	1c04      	adds	r4, r0, #0
     c88:	2000      	movs	r0, #0
     c8a:	f7ff ea9e 	blx	1c8 <sark_lock_get>
     c8e:	4b05      	ldr	r3, [pc, #20]	; (ca4 <sark_shmsg_free+0x20>)
     c90:	2100      	movs	r1, #0
     c92:	681a      	ldr	r2, [r3, #0]
     c94:	6022      	str	r2, [r4, #0]
     c96:	889a      	ldrh	r2, [r3, #4]
     c98:	601c      	str	r4, [r3, #0]
     c9a:	3a01      	subs	r2, #1
     c9c:	809a      	strh	r2, [r3, #4]
     c9e:	f7ff eaa6 	blx	1ec <sark_lock_free>
     ca2:	bd10      	pop	{r4, pc}
     ca4:	e5007f68 	.word	0xe5007f68

00000ca8 <sark_init>:
     ca8:	b570      	push	{r4, r5, r6, lr}
     caa:	2520      	movs	r5, #32
     cac:	1c04      	adds	r4, r0, #0
     cae:	8c28      	ldrh	r0, [r5, #32]
     cb0:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
     cb2:	0080      	lsls	r0, r0, #2
     cb4:	1a20      	subs	r0, r4, r0
     cb6:	21d2      	movs	r1, #210	; 0xd2
     cb8:	f7ff ea6a 	blx	190 <cpu_init_mode>
     cbc:	8caa      	ldrh	r2, [r5, #36]	; 0x24
     cbe:	21d1      	movs	r1, #209	; 0xd1
     cc0:	f7ff ea66 	blx	190 <cpu_init_mode>
     cc4:	2200      	movs	r2, #0
     cc6:	21df      	movs	r1, #223	; 0xdf
     cc8:	f7ff ea62 	blx	190 <cpu_init_mode>
     ccc:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
     cce:	2658      	movs	r6, #88	; 0x58
     cd0:	0889      	lsrs	r1, r1, #2
     cd2:	0089      	lsls	r1, r1, #2
     cd4:	1a61      	subs	r1, r4, r1
     cd6:	4c2a      	ldr	r4, [pc, #168]	; (d80 <sark_init+0xd8>)
     cd8:	6121      	str	r1, [r4, #16]
     cda:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
     cdc:	6160      	str	r0, [r4, #20]
     cde:	f000 fb73 	bl	13c8 <sark_heap_init>
     ce2:	4b28      	ldr	r3, [pc, #160]	; (d84 <sark_init+0xdc>)
     ce4:	4a28      	ldr	r2, [pc, #160]	; (d88 <sark_init+0xe0>)
     ce6:	681b      	ldr	r3, [r3, #0]
     ce8:	4d28      	ldr	r5, [pc, #160]	; (d8c <sark_init+0xe4>)
     cea:	0e1b      	lsrs	r3, r3, #24
     cec:	6063      	str	r3, [r4, #4]
     cee:	189b      	adds	r3, r3, r2
     cf0:	2192      	movs	r1, #146	; 0x92
     cf2:	0049      	lsls	r1, r1, #1
     cf4:	61a0      	str	r0, [r4, #24]
     cf6:	791b      	ldrb	r3, [r3, #4]
     cf8:	6023      	str	r3, [r4, #0]
     cfa:	8cab      	ldrh	r3, [r5, #36]	; 0x24
     cfc:	8623      	strh	r3, [r4, #48]	; 0x30
     cfe:	4b24      	ldr	r3, [pc, #144]	; (d90 <sark_init+0xe8>)
     d00:	60a3      	str	r3, [r4, #8]
     d02:	7830      	ldrb	r0, [r6, #0]
     d04:	f000 fafa 	bl	12fc <sark_alloc>
     d08:	2292      	movs	r2, #146	; 0x92
     d0a:	0052      	lsls	r2, r2, #1
     d0c:	6220      	str	r0, [r4, #32]
     d0e:	7831      	ldrb	r1, [r6, #0]
     d10:	f7ff ff66 	bl	be0 <sark_block_init>
     d14:	6823      	ldr	r3, [r4, #0]
     d16:	2b11      	cmp	r3, #17
     d18:	d81d      	bhi.n	d56 <sark_init+0xae>
     d1a:	4a1e      	ldr	r2, [pc, #120]	; (d94 <sark_init+0xec>)
     d1c:	01d8      	lsls	r0, r3, #7
     d1e:	1880      	adds	r0, r0, r2
     d20:	6daa      	ldr	r2, [r5, #88]	; 0x58
     d22:	61e0      	str	r0, [r4, #28]
     d24:	4353      	muls	r3, r2
     d26:	6d6a      	ldr	r2, [r5, #84]	; 0x54
     d28:	009b      	lsls	r3, r3, #2
     d2a:	18d3      	adds	r3, r2, r3
     d2c:	2100      	movs	r1, #0
     d2e:	2270      	movs	r2, #112	; 0x70
     d30:	6363      	str	r3, [r4, #52]	; 0x34
     d32:	f7ff ea70 	blx	214 <sark_word_set>
     d36:	69e0      	ldr	r0, [r4, #28]
     d38:	2205      	movs	r2, #5
     d3a:	1c03      	adds	r3, r0, #0
     d3c:	332e      	adds	r3, #46	; 0x2e
     d3e:	701a      	strb	r2, [r3, #0]
     d40:	235c      	movs	r3, #92	; 0x5c
     d42:	781a      	ldrb	r2, [r3, #0]
     d44:	1c03      	adds	r3, r0, #0
     d46:	332f      	adds	r3, #47	; 0x2f
     d48:	701a      	strb	r2, [r3, #0]
     d4a:	69ed      	ldr	r5, [r5, #28]
     d4c:	6445      	str	r5, [r0, #68]	; 0x44
     d4e:	4912      	ldr	r1, [pc, #72]	; (d98 <sark_init+0xf0>)
     d50:	3048      	adds	r0, #72	; 0x48
     d52:	f7ff ea56 	blx	200 <sark_str_cpy>
     d56:	f000 fa0d 	bl	1174 <sark_vic_init>
     d5a:	2359      	movs	r3, #89	; 0x59
     d5c:	7818      	ldrb	r0, [r3, #0]
     d5e:	2112      	movs	r1, #18
     d60:	2201      	movs	r2, #1
     d62:	4b0e      	ldr	r3, [pc, #56]	; (d9c <sark_init+0xf4>)
     d64:	f000 fa2e 	bl	11c4 <sark_vic_set>
     d68:	2106      	movs	r1, #6
     d6a:	2201      	movs	r2, #1
     d6c:	2010      	movs	r0, #16
     d6e:	4b0c      	ldr	r3, [pc, #48]	; (da0 <sark_init+0xf8>)
     d70:	f000 fa28 	bl	11c4 <sark_vic_set>
     d74:	235a      	movs	r3, #90	; 0x5a
     d76:	7818      	ldrb	r0, [r3, #0]
     d78:	f000 f9de 	bl	1138 <event_alloc>
     d7c:	201f      	movs	r0, #31
     d7e:	bd70      	pop	{r4, r5, r6, pc}
     d80:	0040034c 	.word	0x0040034c
     d84:	40000014 	.word	0x40000014
     d88:	e5007f90 	.word	0xe5007f90
     d8c:	e5007f00 	.word	0xe5007f00
     d90:	deaddead 	.word	0xdeaddead
     d94:	e5007000 	.word	0xe5007000
     d98:	00001b88 	.word	0x00001b88
     d9c:	00000314 	.word	0x00000314
     da0:	0000120c 	.word	0x0000120c

00000da4 <sark_msg_send>:
     da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     da6:	1c05      	adds	r5, r0, #0
     da8:	1c0f      	adds	r7, r1, #0
     daa:	f7ff ff51 	bl	c50 <sark_shmsg_get>
     dae:	1c04      	adds	r4, r0, #0
     db0:	3800      	subs	r0, #0
     db2:	d03d      	beq.n	e30 <sark_msg_send+0x8c>
     db4:	1c29      	adds	r1, r5, #0
     db6:	f7ff ea40 	blx	238 <sark_msg_cpy>
     dba:	4e1e      	ldr	r6, [pc, #120]	; (e34 <sark_msg_send+0x90>)
     dbc:	2501      	movs	r5, #1
     dbe:	69f3      	ldr	r3, [r6, #28]
     dc0:	1c28      	adds	r0, r5, #0
     dc2:	635c      	str	r4, [r3, #52]	; 0x34
     dc4:	3339      	adds	r3, #57	; 0x39
     dc6:	701d      	strb	r5, [r3, #0]
     dc8:	f7ff e9fe 	blx	1c8 <sark_lock_get>
     dcc:	6831      	ldr	r1, [r6, #0]
     dce:	4a1a      	ldr	r2, [pc, #104]	; (e38 <sark_msg_send+0x94>)
     dd0:	1c2e      	adds	r6, r5, #0
     dd2:	6813      	ldr	r3, [r2, #0]
     dd4:	408e      	lsls	r6, r1
     dd6:	1c31      	adds	r1, r6, #0
     dd8:	4319      	orrs	r1, r3
     dda:	6011      	str	r1, [r2, #0]
     ddc:	2b00      	cmp	r3, #0
     dde:	d106      	bne.n	dee <sark_msg_send+0x4a>
     de0:	4b16      	ldr	r3, [pc, #88]	; (e3c <sark_msg_send+0x98>)
     de2:	4a17      	ldr	r2, [pc, #92]	; (e40 <sark_msg_send+0x9c>)
     de4:	781b      	ldrb	r3, [r3, #0]
     de6:	409d      	lsls	r5, r3
     de8:	4b16      	ldr	r3, [pc, #88]	; (e44 <sark_msg_send+0xa0>)
     dea:	18ad      	adds	r5, r5, r2
     dec:	601d      	str	r5, [r3, #0]
     dee:	2101      	movs	r1, #1
     df0:	f7ff e9fc 	blx	1ec <sark_lock_free>
     df4:	4b0f      	ldr	r3, [pc, #60]	; (e34 <sark_msg_send+0x90>)
     df6:	4a14      	ldr	r2, [pc, #80]	; (e48 <sark_msg_send+0xa4>)
     df8:	69db      	ldr	r3, [r3, #28]
     dfa:	6815      	ldr	r5, [r2, #0]
     dfc:	1c18      	adds	r0, r3, #0
     dfe:	3039      	adds	r0, #57	; 0x39
     e00:	e008      	b.n	e14 <sark_msg_send+0x70>
     e02:	6811      	ldr	r1, [r2, #0]
     e04:	1b49      	subs	r1, r1, r5
     e06:	42b9      	cmp	r1, r7
     e08:	d904      	bls.n	e14 <sark_msg_send+0x70>
     e0a:	3339      	adds	r3, #57	; 0x39
     e0c:	781b      	ldrb	r3, [r3, #0]
     e0e:	2b00      	cmp	r3, #0
     e10:	d009      	beq.n	e26 <sark_msg_send+0x82>
     e12:	e003      	b.n	e1c <sark_msg_send+0x78>
     e14:	7801      	ldrb	r1, [r0, #0]
     e16:	2900      	cmp	r1, #0
     e18:	d1f3      	bne.n	e02 <sark_msg_send+0x5e>
     e1a:	e7f6      	b.n	e0a <sark_msg_send+0x66>
     e1c:	1c20      	adds	r0, r4, #0
     e1e:	f7ff ff31 	bl	c84 <sark_shmsg_free>
     e22:	2000      	movs	r0, #0
     e24:	e004      	b.n	e30 <sark_msg_send+0x8c>
     e26:	4b03      	ldr	r3, [pc, #12]	; (e34 <sark_msg_send+0x90>)
     e28:	2001      	movs	r0, #1
     e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     e2c:	3201      	adds	r2, #1
     e2e:	62da      	str	r2, [r3, #44]	; 0x2c
     e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	0040034c 	.word	0x0040034c
     e38:	e5007fec 	.word	0xe5007fec
     e3c:	e5007fa8 	.word	0xe5007fa8
     e40:	5ec00000 	.word	0x5ec00000
     e44:	e2000008 	.word	0xe2000008
     e48:	e5007f10 	.word	0xe5007f10

00000e4c <sark_cmd_ver>:
     e4c:	b508      	push	{r3, lr}
     e4e:	4b0a      	ldr	r3, [pc, #40]	; (e78 <sark_cmd_ver+0x2c>)
     e50:	6859      	ldr	r1, [r3, #4]
     e52:	681b      	ldr	r3, [r3, #0]
     e54:	020a      	lsls	r2, r1, #8
     e56:	18d3      	adds	r3, r2, r3
     e58:	4a08      	ldr	r2, [pc, #32]	; (e7c <sark_cmd_ver+0x30>)
     e5a:	4909      	ldr	r1, [pc, #36]	; (e80 <sark_cmd_ver+0x34>)
     e5c:	8812      	ldrh	r2, [r2, #0]
     e5e:	0412      	lsls	r2, r2, #16
     e60:	189b      	adds	r3, r3, r2
     e62:	6143      	str	r3, [r0, #20]
     e64:	4b07      	ldr	r3, [pc, #28]	; (e84 <sark_cmd_ver+0x38>)
     e66:	6183      	str	r3, [r0, #24]
     e68:	4b07      	ldr	r3, [pc, #28]	; (e88 <sark_cmd_ver+0x3c>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	61c3      	str	r3, [r0, #28]
     e6e:	3020      	adds	r0, #32
     e70:	f7ff e9c6 	blx	200 <sark_str_cpy>
     e74:	201b      	movs	r0, #27
     e76:	bd08      	pop	{r3, pc}
     e78:	0040034c 	.word	0x0040034c
     e7c:	e5007f00 	.word	0xe5007f00
     e80:	00001e35 	.word	0x00001e35
     e84:	00850100 	.word	0x00850100
     e88:	00001b98 	.word	0x00001b98

00000e8c <sark_cmd_read>:
     e8c:	69c1      	ldr	r1, [r0, #28]
     e8e:	b530      	push	{r4, r5, lr}
     e90:	6983      	ldr	r3, [r0, #24]
     e92:	2902      	cmp	r1, #2
     e94:	d803      	bhi.n	e9e <sark_cmd_read+0x12>
     e96:	2280      	movs	r2, #128	; 0x80
     e98:	0052      	lsls	r2, r2, #1
     e9a:	429a      	cmp	r2, r3
     e9c:	d203      	bcs.n	ea6 <sark_cmd_read+0x1a>
     e9e:	2384      	movs	r3, #132	; 0x84
     ea0:	8203      	strh	r3, [r0, #16]
     ea2:	2300      	movs	r3, #0
     ea4:	e023      	b.n	eee <sark_cmd_read+0x62>
     ea6:	6942      	ldr	r2, [r0, #20]
     ea8:	3014      	adds	r0, #20
     eaa:	2900      	cmp	r1, #0
     eac:	d108      	bne.n	ec0 <sark_cmd_read+0x34>
     eae:	18d1      	adds	r1, r2, r3
     eb0:	1a80      	subs	r0, r0, r2
     eb2:	e002      	b.n	eba <sark_cmd_read+0x2e>
     eb4:	7814      	ldrb	r4, [r2, #0]
     eb6:	5484      	strb	r4, [r0, r2]
     eb8:	3201      	adds	r2, #1
     eba:	428a      	cmp	r2, r1
     ebc:	d1fa      	bne.n	eb4 <sark_cmd_read+0x28>
     ebe:	e016      	b.n	eee <sark_cmd_read+0x62>
     ec0:	2901      	cmp	r1, #1
     ec2:	d10a      	bne.n	eda <sark_cmd_read+0x4e>
     ec4:	0859      	lsrs	r1, r3, #1
     ec6:	0049      	lsls	r1, r1, #1
     ec8:	1889      	adds	r1, r1, r2
     eca:	1a80      	subs	r0, r0, r2
     ecc:	e002      	b.n	ed4 <sark_cmd_read+0x48>
     ece:	8814      	ldrh	r4, [r2, #0]
     ed0:	5284      	strh	r4, [r0, r2]
     ed2:	3202      	adds	r2, #2
     ed4:	428a      	cmp	r2, r1
     ed6:	d1fa      	bne.n	ece <sark_cmd_read+0x42>
     ed8:	e009      	b.n	eee <sark_cmd_read+0x62>
     eda:	089c      	lsrs	r4, r3, #2
     edc:	00a4      	lsls	r4, r4, #2
     ede:	1904      	adds	r4, r0, r4
     ee0:	1c01      	adds	r1, r0, #0
     ee2:	e002      	b.n	eea <sark_cmd_read+0x5e>
     ee4:	1a0d      	subs	r5, r1, r0
     ee6:	58ad      	ldr	r5, [r5, r2]
     ee8:	c120      	stmia	r1!, {r5}
     eea:	42a1      	cmp	r1, r4
     eec:	d1fa      	bne.n	ee4 <sark_cmd_read+0x58>
     eee:	1c18      	adds	r0, r3, #0
     ef0:	bd30      	pop	{r4, r5, pc}

00000ef2 <sark_cmd_write>:
     ef2:	69c1      	ldr	r1, [r0, #28]
     ef4:	b530      	push	{r4, r5, lr}
     ef6:	6982      	ldr	r2, [r0, #24]
     ef8:	2902      	cmp	r1, #2
     efa:	d803      	bhi.n	f04 <RTR_TST2>
     efc:	2380      	movs	r3, #128	; 0x80
     efe:	005b      	lsls	r3, r3, #1
     f00:	4293      	cmp	r3, r2
     f02:	d202      	bcs.n	f0a <RTR_TST2+0x6>
     f04:	2384      	movs	r3, #132	; 0x84
     f06:	8203      	strh	r3, [r0, #16]
     f08:	e026      	b.n	f58 <RTR_TST2+0x54>
     f0a:	6943      	ldr	r3, [r0, #20]
     f0c:	2900      	cmp	r1, #0
     f0e:	d10b      	bne.n	f28 <RTR_TST2+0x24>
     f10:	1881      	adds	r1, r0, r2
     f12:	1c02      	adds	r2, r0, #0
     f14:	e005      	b.n	f22 <RTR_TST2+0x1e>
     f16:	1c14      	adds	r4, r2, #0
     f18:	3420      	adds	r4, #32
     f1a:	7825      	ldrb	r5, [r4, #0]
     f1c:	1a14      	subs	r4, r2, r0
     f1e:	3201      	adds	r2, #1
     f20:	54e5      	strb	r5, [r4, r3]
     f22:	428a      	cmp	r2, r1
     f24:	d1f7      	bne.n	f16 <RTR_TST2+0x12>
     f26:	e017      	b.n	f58 <RTR_TST2+0x54>
     f28:	3020      	adds	r0, #32
     f2a:	2901      	cmp	r1, #1
     f2c:	d10b      	bne.n	f46 <RTR_TST2+0x42>
     f2e:	0851      	lsrs	r1, r2, #1
     f30:	0049      	lsls	r1, r1, #1
     f32:	1841      	adds	r1, r0, r1
     f34:	1c02      	adds	r2, r0, #0
     f36:	e003      	b.n	f40 <RTR_TST2+0x3c>
     f38:	8815      	ldrh	r5, [r2, #0]
     f3a:	1a14      	subs	r4, r2, r0
     f3c:	3202      	adds	r2, #2
     f3e:	52e5      	strh	r5, [r4, r3]
     f40:	428a      	cmp	r2, r1
     f42:	d1f9      	bne.n	f38 <RTR_TST2+0x34>
     f44:	e008      	b.n	f58 <RTR_TST2+0x54>
     f46:	0892      	lsrs	r2, r2, #2
     f48:	0092      	lsls	r2, r2, #2
     f4a:	18d2      	adds	r2, r2, r3
     f4c:	1ac0      	subs	r0, r0, r3
     f4e:	e001      	b.n	f54 <RTR_TST2+0x50>
     f50:	58c1      	ldr	r1, [r0, r3]
     f52:	c302      	stmia	r3!, {r1}
     f54:	4293      	cmp	r3, r2
     f56:	d1fb      	bne.n	f50 <RTR_TST2+0x4c>
     f58:	2000      	movs	r0, #0
     f5a:	bd30      	pop	{r4, r5, pc}

00000f5c <sark_cmd_fill>:
     f5c:	b508      	push	{r3, lr}
     f5e:	1c03      	adds	r3, r0, #0
     f60:	3314      	adds	r3, #20
     f62:	cb07      	ldmia	r3!, {r0, r1, r2}
     f64:	f7ff e956 	blx	214 <sark_word_set>
     f68:	2000      	movs	r0, #0
     f6a:	bd08      	pop	{r3, pc}

00000f6c <sark_wait>:
     f6c:	b508      	push	{r3, lr}
     f6e:	e001      	b.n	f74 <sark_wait+0x8>
     f70:	f7ff e926 	blx	1c0 <cpu_wfi>
     f74:	235d      	movs	r3, #93	; 0x5d
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	07da      	lsls	r2, r3, #31
     f7a:	d4f9      	bmi.n	f70 <sark_wait+0x4>
     f7c:	bd08      	pop	{r3, pc}
	...

00000f80 <sark_int>:
     f80:	4b55      	ldr	r3, [pc, #340]	; (10d8 <SV_SIZE+0xd8>)
     f82:	2101      	movs	r1, #1
     f84:	685a      	ldr	r2, [r3, #4]
     f86:	b570      	push	{r4, r5, r6, lr}
     f88:	4091      	lsls	r1, r2
     f8a:	4a54      	ldr	r2, [pc, #336]	; (10dc <SV_SIZE+0xdc>)
     f8c:	1889      	adds	r1, r1, r2
     f8e:	4a54      	ldr	r2, [pc, #336]	; (10e0 <SV_SIZE+0xe0>)
     f90:	6011      	str	r1, [r2, #0]
     f92:	69da      	ldr	r2, [r3, #28]
     f94:	1c11      	adds	r1, r2, #0
     f96:	3138      	adds	r1, #56	; 0x38
     f98:	780b      	ldrb	r3, [r1, #0]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d100      	bne.n	fa0 <sark_int+0x20>
     f9e:	e099      	b.n	10d4 <SV_SIZE+0xd4>
     fa0:	6b15      	ldr	r5, [r2, #48]	; 0x30
     fa2:	2b02      	cmp	r3, #2
     fa4:	d100      	bne.n	fa8 <sark_int+0x28>
     fa6:	6310      	str	r0, [r2, #48]	; 0x30
     fa8:	2200      	movs	r2, #0
     faa:	700a      	strb	r2, [r1, #0]
     fac:	2b03      	cmp	r3, #3
     fae:	d124      	bne.n	ffa <sark_int+0x7a>
     fb0:	1ee8      	subs	r0, r5, #3
     fb2:	280a      	cmp	r0, #10
     fb4:	d900      	bls.n	fb8 <sark_int+0x38>
     fb6:	e08d      	b.n	10d4 <SV_SIZE+0xd4>
     fb8:	f7ff f9c8 	bl	34c <__gnu_thumb1_case_uqi>
     fbc:	068c8c10 	.word	0x068c8c10
     fc0:	161b0c08 	.word	0x161b0c08
     fc4:	1616      	.short	0x1616
     fc6:	16          	.byte	0x16
     fc7:	00          	.byte	0x00
     fc8:	2001      	movs	r0, #1
     fca:	e000      	b.n	fce <sark_int+0x4e>
     fcc:	2000      	movs	r0, #0
     fce:	f000 f891 	bl	10f4 <event_pause>
     fd2:	e07f      	b.n	10d4 <SV_SIZE+0xd4>
     fd4:	20ff      	movs	r0, #255	; 0xff
     fd6:	f000 f8a3 	bl	1120 <event_stop>
     fda:	e07b      	b.n	10d4 <SV_SIZE+0xd4>
     fdc:	235d      	movs	r3, #93	; 0x5d
     fde:	781a      	ldrb	r2, [r3, #0]
     fe0:	2101      	movs	r1, #1
     fe2:	438a      	bics	r2, r1
     fe4:	701a      	strb	r2, [r3, #0]
     fe6:	e075      	b.n	10d4 <SV_SIZE+0xd4>
     fe8:	4b3e      	ldr	r3, [pc, #248]	; (10e4 <SV_SIZE+0xe4>)
     fea:	2280      	movs	r2, #128	; 0x80
     fec:	62dd      	str	r5, [r3, #44]	; 0x2c
     fee:	0592      	lsls	r2, r2, #22
     ff0:	e000      	b.n	ff4 <sark_int+0x74>
     ff2:	2210      	movs	r2, #16
     ff4:	4b3c      	ldr	r3, [pc, #240]	; (10e8 <SV_SIZE+0xe8>)
     ff6:	601a      	str	r2, [r3, #0]
     ff8:	e06c      	b.n	10d4 <SV_SIZE+0xd4>
     ffa:	2b01      	cmp	r3, #1
     ffc:	d16a      	bne.n	10d4 <SV_SIZE+0xd4>
     ffe:	f7ff fdff 	bl	c00 <sark_msg_get>
    1002:	1e04      	subs	r4, r0, #0
    1004:	d063      	beq.n	10ce <SV_SIZE+0xce>
    1006:	1c29      	adds	r1, r5, #0
    1008:	1c20      	adds	r0, r4, #0
    100a:	f7ff e916 	blx	238 <sark_msg_cpy>
    100e:	1c28      	adds	r0, r5, #0
    1010:	f7ff fe38 	bl	c84 <sark_shmsg_free>
    1014:	4b30      	ldr	r3, [pc, #192]	; (10d8 <SV_SIZE+0xd8>)
    1016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1018:	3201      	adds	r2, #1
    101a:	629a      	str	r2, [r3, #40]	; 0x28
    101c:	7aa5      	ldrb	r5, [r4, #10]
    101e:	231f      	movs	r3, #31
    1020:	1c28      	adds	r0, r5, #0
    1022:	4398      	bics	r0, r3
    1024:	d130      	bne.n	1088 <SV_SIZE+0x88>
    1026:	88a3      	ldrh	r3, [r4, #4]
    1028:	2b17      	cmp	r3, #23
    102a:	d801      	bhi.n	1030 <SV_SIZE+0x30>
    102c:	2381      	movs	r3, #129	; 0x81
    102e:	e01b      	b.n	1068 <SV_SIZE+0x68>
    1030:	8a23      	ldrh	r3, [r4, #16]
    1032:	2280      	movs	r2, #128	; 0x80
    1034:	8222      	strh	r2, [r4, #16]
    1036:	2b00      	cmp	r3, #0
    1038:	d103      	bne.n	1042 <SV_SIZE+0x42>
    103a:	1c20      	adds	r0, r4, #0
    103c:	f7ff ff06 	bl	e4c <sark_cmd_ver>
    1040:	e013      	b.n	106a <SV_SIZE+0x6a>
    1042:	2b02      	cmp	r3, #2
    1044:	d103      	bne.n	104e <SV_SIZE+0x4e>
    1046:	1c20      	adds	r0, r4, #0
    1048:	f7ff ff20 	bl	e8c <sark_cmd_read>
    104c:	e00d      	b.n	106a <SV_SIZE+0x6a>
    104e:	2b03      	cmp	r3, #3
    1050:	d103      	bne.n	105a <SV_SIZE+0x5a>
    1052:	1c20      	adds	r0, r4, #0
    1054:	f7ff ff4d 	bl	ef2 <sark_cmd_write>
    1058:	e007      	b.n	106a <SV_SIZE+0x6a>
    105a:	2b05      	cmp	r3, #5
    105c:	d103      	bne.n	1066 <SV_SIZE+0x66>
    105e:	1c20      	adds	r0, r4, #0
    1060:	f7ff ff7c 	bl	f5c <sark_cmd_fill>
    1064:	e001      	b.n	106a <SV_SIZE+0x6a>
    1066:	2383      	movs	r3, #131	; 0x83
    1068:	8223      	strh	r3, [r4, #16]
    106a:	7aa2      	ldrb	r2, [r4, #10]
    106c:	7ae1      	ldrb	r1, [r4, #11]
    106e:	89a3      	ldrh	r3, [r4, #12]
    1070:	300c      	adds	r0, #12
    1072:	72e2      	strb	r2, [r4, #11]
    1074:	89e2      	ldrh	r2, [r4, #14]
    1076:	80a0      	strh	r0, [r4, #4]
    1078:	72a1      	strb	r1, [r4, #10]
    107a:	81a2      	strh	r2, [r4, #12]
    107c:	81e3      	strh	r3, [r4, #14]
    107e:	1c20      	adds	r0, r4, #0
    1080:	210a      	movs	r1, #10
    1082:	f7ff fe8f 	bl	da4 <sark_msg_send>
    1086:	e01e      	b.n	10c6 <SV_SIZE+0xc6>
    1088:	235b      	movs	r3, #91	; 0x5b
    108a:	781b      	ldrb	r3, [r3, #0]
    108c:	2b00      	cmp	r3, #0
    108e:	d00f      	beq.n	10b0 <SV_SIZE+0xb0>
    1090:	4b16      	ldr	r3, [pc, #88]	; (10ec <SV_SIZE+0xec>)
    1092:	699b      	ldr	r3, [r3, #24]
    1094:	2b00      	cmp	r3, #0
    1096:	d016      	beq.n	10c6 <SV_SIZE+0xc6>
    1098:	f7ff e886 	blx	1a8 <cpu_int_disable>
    109c:	096a      	lsrs	r2, r5, #5
    109e:	1c21      	adds	r1, r4, #0
    10a0:	1c06      	adds	r6, r0, #0
    10a2:	2003      	movs	r0, #3
    10a4:	f000 fc10 	bl	18c8 <schedule_sysmode>
    10a8:	1c30      	adds	r0, r6, #0
    10aa:	f7ff e886 	blx	1b8 <cpu_int_restore>
    10ae:	e011      	b.n	10d4 <SV_SIZE+0xd4>
    10b0:	4b0f      	ldr	r3, [pc, #60]	; (10f0 <SV_SIZE+0xf0>)
    10b2:	681a      	ldr	r2, [r3, #0]
    10b4:	2380      	movs	r3, #128	; 0x80
    10b6:	055b      	lsls	r3, r3, #21
    10b8:	421a      	tst	r2, r3
    10ba:	d004      	beq.n	10c6 <SV_SIZE+0xc6>
    10bc:	4a09      	ldr	r2, [pc, #36]	; (10e4 <SV_SIZE+0xe4>)
    10be:	6294      	str	r4, [r2, #40]	; 0x28
    10c0:	4a09      	ldr	r2, [pc, #36]	; (10e8 <SV_SIZE+0xe8>)
    10c2:	6013      	str	r3, [r2, #0]
    10c4:	e006      	b.n	10d4 <SV_SIZE+0xd4>
    10c6:	1c20      	adds	r0, r4, #0
    10c8:	f7ff fdb2 	bl	c30 <sark_msg_free>
    10cc:	e002      	b.n	10d4 <SV_SIZE+0xd4>
    10ce:	1c28      	adds	r0, r5, #0
    10d0:	f7ff fdd8 	bl	c84 <sark_shmsg_free>
    10d4:	bd70      	pop	{r4, r5, r6, pc}
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	0040034c 	.word	0x0040034c
    10dc:	5ec00000 	.word	0x5ec00000
    10e0:	e200000c 	.word	0xe200000c
    10e4:	00400388 	.word	0x00400388
    10e8:	1f000018 	.word	0x1f000018
    10ec:	004005b4 	.word	0x004005b4
    10f0:	1f000010 	.word	0x1f000010

000010f4 <event_pause>:
    10f4:	b538      	push	{r3, r4, r5, lr}
    10f6:	1c05      	adds	r5, r0, #0
    10f8:	4c08      	ldr	r4, [pc, #32]	; (111c <event_pause+0x28>)
    10fa:	2800      	cmp	r0, #0
    10fc:	d003      	beq.n	1106 <event_pause+0x12>
    10fe:	2301      	movs	r3, #1
    1100:	7623      	strb	r3, [r4, #24]
    1102:	200a      	movs	r0, #10
    1104:	e001      	b.n	110a <event_pause+0x16>
    1106:	7620      	strb	r0, [r4, #24]
    1108:	2007      	movs	r0, #7
    110a:	f7ff fd57 	bl	bbc <sark_cpu_state>
    110e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1110:	2b00      	cmp	r3, #0
    1112:	d002      	beq.n	111a <event_pause+0x26>
    1114:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1116:	1c28      	adds	r0, r5, #0
    1118:	4798      	blx	r3
    111a:	bd38      	pop	{r3, r4, r5, pc}
    111c:	00400388 	.word	0x00400388

00001120 <event_stop>:
    1120:	4b03      	ldr	r3, [pc, #12]	; (1130 <event_stop+0x10>)
    1122:	2202      	movs	r2, #2
    1124:	761a      	strb	r2, [r3, #24]
    1126:	4a03      	ldr	r2, [pc, #12]	; (1134 <event_stop+0x14>)
    1128:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    112a:	6011      	str	r1, [r2, #0]
    112c:	6398      	str	r0, [r3, #56]	; 0x38
    112e:	4770      	bx	lr
    1130:	00400388 	.word	0x00400388
    1134:	1f000014 	.word	0x1f000014

00001138 <event_alloc>:
    1138:	b570      	push	{r4, r5, r6, lr}
    113a:	2118      	movs	r1, #24
    113c:	1c06      	adds	r6, r0, #0
    113e:	f000 f8dd 	bl	12fc <sark_alloc>
    1142:	4d0b      	ldr	r5, [pc, #44]	; (1170 <event_alloc+0x38>)
    1144:	1e04      	subs	r4, r0, #0
    1146:	d00d      	beq.n	1164 <event_alloc+0x2c>
    1148:	1c31      	adds	r1, r6, #0
    114a:	2218      	movs	r2, #24
    114c:	f7ff fd48 	bl	be0 <sark_block_init>
    1150:	1c06      	adds	r6, r0, #0
    1152:	f7ff e82a 	blx	1a8 <cpu_int_disable>
    1156:	682a      	ldr	r2, [r5, #0]
    1158:	6032      	str	r2, [r6, #0]
    115a:	602c      	str	r4, [r5, #0]
    115c:	f7ff e82c 	blx	1b8 <cpu_int_restore>
    1160:	2001      	movs	r0, #1
    1162:	e003      	b.n	116c <event_alloc+0x34>
    1164:	696a      	ldr	r2, [r5, #20]
    1166:	2308      	movs	r3, #8
    1168:	4313      	orrs	r3, r2
    116a:	616b      	str	r3, [r5, #20]
    116c:	bd70      	pop	{r4, r5, r6, pc}
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	00400388 	.word	0x00400388

00001174 <sark_vic_init>:
    1174:	4b0b      	ldr	r3, [pc, #44]	; (11a4 <sark_vic_init+0x30>)
    1176:	2201      	movs	r2, #1
    1178:	4252      	negs	r2, r2
    117a:	b510      	push	{r4, lr}
    117c:	601a      	str	r2, [r3, #0]
    117e:	4b0a      	ldr	r3, [pc, #40]	; (11a8 <sark_vic_init+0x34>)
    1180:	2200      	movs	r2, #0
    1182:	601a      	str	r2, [r3, #0]
    1184:	4b09      	ldr	r3, [pc, #36]	; (11ac <sark_vic_init+0x38>)
    1186:	4c0a      	ldr	r4, [pc, #40]	; (11b0 <sark_vic_init+0x3c>)
    1188:	601a      	str	r2, [r3, #0]
    118a:	490a      	ldr	r1, [pc, #40]	; (11b4 <sark_vic_init+0x40>)
    118c:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <sark_vic_init+0x44>)
    118e:	1e58      	subs	r0, r3, #1
    1190:	601a      	str	r2, [r3, #0]
    1192:	38ff      	subs	r0, #255	; 0xff
    1194:	3304      	adds	r3, #4
    1196:	6004      	str	r4, [r0, #0]
    1198:	428b      	cmp	r3, r1
    119a:	d1f8      	bne.n	118e <sark_vic_init+0x1a>
    119c:	4b07      	ldr	r3, [pc, #28]	; (11bc <sark_vic_init+0x48>)
    119e:	4a08      	ldr	r2, [pc, #32]	; (11c0 <sark_vic_init+0x4c>)
    11a0:	601a      	str	r2, [r3, #0]
    11a2:	bd10      	pop	{r4, pc}
    11a4:	1f000014 	.word	0x1f000014
    11a8:	1f00000c 	.word	0x1f00000c
    11ac:	1f000030 	.word	0x1f000030
    11b0:	00000108 	.word	0x00000108
    11b4:	1f000240 	.word	0x1f000240
    11b8:	1f000200 	.word	0x1f000200
    11bc:	1f000034 	.word	0x1f000034
    11c0:	00000344 	.word	0x00000344

000011c4 <sark_vic_set>:
    11c4:	b530      	push	{r4, r5, lr}
    11c6:	2810      	cmp	r0, #16
    11c8:	d106      	bne.n	11d8 <sark_vic_set+0x14>
    11ca:	2020      	movs	r0, #32
    11cc:	61c3      	str	r3, [r0, #28]
    11ce:	2001      	movs	r0, #1
    11d0:	4b0a      	ldr	r3, [pc, #40]	; (11fc <sark_vic_set+0x38>)
    11d2:	4088      	lsls	r0, r1
    11d4:	6018      	str	r0, [r3, #0]
    11d6:	e009      	b.n	11ec <sark_vic_set+0x28>
    11d8:	4d09      	ldr	r5, [pc, #36]	; (1200 <sark_vic_set+0x3c>)
    11da:	0084      	lsls	r4, r0, #2
    11dc:	1964      	adds	r4, r4, r5
    11de:	6023      	str	r3, [r4, #0]
    11e0:	4b08      	ldr	r3, [pc, #32]	; (1204 <sark_vic_set+0x40>)
    11e2:	0080      	lsls	r0, r0, #2
    11e4:	18c0      	adds	r0, r0, r3
    11e6:	2320      	movs	r3, #32
    11e8:	430b      	orrs	r3, r1
    11ea:	6003      	str	r3, [r0, #0]
    11ec:	2a00      	cmp	r2, #0
    11ee:	d004      	beq.n	11fa <sark_vic_set+0x36>
    11f0:	2301      	movs	r3, #1
    11f2:	408b      	lsls	r3, r1
    11f4:	1c19      	adds	r1, r3, #0
    11f6:	4b04      	ldr	r3, [pc, #16]	; (1208 <sark_vic_set+0x44>)
    11f8:	6019      	str	r1, [r3, #0]
    11fa:	bd30      	pop	{r4, r5, pc}
    11fc:	1f00000c 	.word	0x1f00000c
    1200:	1f000100 	.word	0x1f000100
    1204:	1f000200 	.word	0x1f000200
    1208:	1f000010 	.word	0x1f000010

0000120c <sark_fiq_han>:
    120c:	e92d000c 	push	{r2, r3}
    1210:	e3a03202 	mov	r3, #536870912	; 0x20000000
    1214:	e5933014 	ldr	r3, [r3, #20]
    1218:	e59f3010 	ldr	r3, [pc, #16]	; 1230 <sark_fiq_han+0x24>
    121c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    1220:	e2822001 	add	r2, r2, #1
    1224:	e5832038 	str	r2, [r3, #56]	; 0x38
    1228:	e8bd000c 	pop	{r2, r3}
    122c:	e25ef004 	subs	pc, lr, #4
    1230:	0040034c 	.word	0x0040034c

00001234 <sark_xalloc>:
    1234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1236:	1c07      	adds	r7, r0, #0
    1238:	1c15      	adds	r5, r2, #0
    123a:	2aff      	cmp	r2, #255	; 0xff
    123c:	d858      	bhi.n	12f0 <sark_xalloc+0xbc>
    123e:	2900      	cmp	r1, #0
    1240:	d100      	bne.n	1244 <sark_xalloc+0x10>
    1242:	e055      	b.n	12f0 <sark_xalloc+0xbc>
    1244:	0a1e      	lsrs	r6, r3, #8
    1246:	0798      	lsls	r0, r3, #30
    1248:	d401      	bmi.n	124e <sark_xalloc+0x1a>
    124a:	225c      	movs	r2, #92	; 0x5c
    124c:	7816      	ldrb	r6, [r2, #0]
    124e:	0236      	lsls	r6, r6, #8
    1250:	1976      	adds	r6, r6, r5
    1252:	2d00      	cmp	r5, #0
    1254:	d005      	beq.n	1262 <sark_xalloc+0x2e>
    1256:	4a27      	ldr	r2, [pc, #156]	; (12f4 <sark_xalloc+0xc0>)
    1258:	00b0      	lsls	r0, r6, #2
    125a:	6812      	ldr	r2, [r2, #0]
    125c:	5882      	ldr	r2, [r0, r2]
    125e:	2a00      	cmp	r2, #0
    1260:	d146      	bne.n	12f0 <sark_xalloc+0xbc>
    1262:	2203      	movs	r2, #3
    1264:	3103      	adds	r1, #3
    1266:	4391      	bics	r1, r2
    1268:	2201      	movs	r2, #1
    126a:	3108      	adds	r1, #8
    126c:	4013      	ands	r3, r2
    126e:	9101      	str	r1, [sp, #4]
    1270:	9300      	str	r3, [sp, #0]
    1272:	d003      	beq.n	127c <sark_xalloc+0x48>
    1274:	2006      	movs	r0, #6
    1276:	f7fe efa8 	blx	1c8 <sark_lock_get>
    127a:	4684      	mov	ip, r0
    127c:	683c      	ldr	r4, [r7, #0]
    127e:	2200      	movs	r2, #0
    1280:	e02d      	b.n	12de <sark_xalloc+0xaa>
    1282:	9801      	ldr	r0, [sp, #4]
    1284:	6821      	ldr	r1, [r4, #0]
    1286:	1823      	adds	r3, r4, r0
    1288:	42a3      	cmp	r3, r4
    128a:	d92a      	bls.n	12e2 <sark_xalloc+0xae>
    128c:	428b      	cmp	r3, r1
    128e:	d902      	bls.n	1296 <sark_xalloc+0x62>
    1290:	1c22      	adds	r2, r4, #0
    1292:	6864      	ldr	r4, [r4, #4]
    1294:	e023      	b.n	12de <sark_xalloc+0xaa>
    1296:	1c18      	adds	r0, r3, #0
    1298:	3008      	adds	r0, #8
    129a:	4281      	cmp	r1, r0
    129c:	d904      	bls.n	12a8 <sark_xalloc+0x74>
    129e:	6019      	str	r1, [r3, #0]
    12a0:	6861      	ldr	r1, [r4, #4]
    12a2:	6059      	str	r1, [r3, #4]
    12a4:	6023      	str	r3, [r4, #0]
    12a6:	6063      	str	r3, [r4, #4]
    12a8:	6863      	ldr	r3, [r4, #4]
    12aa:	2a00      	cmp	r2, #0
    12ac:	d001      	beq.n	12b2 <sark_xalloc+0x7e>
    12ae:	6053      	str	r3, [r2, #4]
    12b0:	e000      	b.n	12b4 <sark_xalloc+0x80>
    12b2:	603b      	str	r3, [r7, #0]
    12b4:	9a00      	ldr	r2, [sp, #0]
    12b6:	2a00      	cmp	r2, #0
    12b8:	d003      	beq.n	12c2 <sark_xalloc+0x8e>
    12ba:	4660      	mov	r0, ip
    12bc:	2106      	movs	r1, #6
    12be:	f7fe ef96 	blx	1ec <sark_lock_free>
    12c2:	480d      	ldr	r0, [pc, #52]	; (12f8 <sark_xalloc+0xc4>)
    12c4:	1833      	adds	r3, r6, r0
    12c6:	6063      	str	r3, [r4, #4]
    12c8:	2d00      	cmp	r5, #0
    12ca:	d005      	beq.n	12d8 <sark_xalloc+0xa4>
    12cc:	4b09      	ldr	r3, [pc, #36]	; (12f4 <sark_xalloc+0xc0>)
    12ce:	1c22      	adds	r2, r4, #0
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	00b6      	lsls	r6, r6, #2
    12d4:	3208      	adds	r2, #8
    12d6:	50f2      	str	r2, [r6, r3]
    12d8:	1c20      	adds	r0, r4, #0
    12da:	3008      	adds	r0, #8
    12dc:	e009      	b.n	12f2 <sark_xalloc+0xbe>
    12de:	2c00      	cmp	r4, #0
    12e0:	d1cf      	bne.n	1282 <sark_xalloc+0x4e>
    12e2:	9900      	ldr	r1, [sp, #0]
    12e4:	2900      	cmp	r1, #0
    12e6:	d003      	beq.n	12f0 <sark_xalloc+0xbc>
    12e8:	4660      	mov	r0, ip
    12ea:	2106      	movs	r1, #6
    12ec:	f7fe ef7e 	blx	1ec <sark_lock_free>
    12f0:	2000      	movs	r0, #0
    12f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    12f4:	e5007fdc 	.word	0xe5007fdc
    12f8:	ffff0000 	.word	0xffff0000

000012fc <sark_alloc>:
    12fc:	4a04      	ldr	r2, [pc, #16]	; (1310 <sark_alloc+0x14>)
    12fe:	b508      	push	{r3, lr}
    1300:	1c03      	adds	r3, r0, #0
    1302:	6990      	ldr	r0, [r2, #24]
    1304:	2200      	movs	r2, #0
    1306:	4359      	muls	r1, r3
    1308:	1c13      	adds	r3, r2, #0
    130a:	f7ff ff93 	bl	1234 <sark_xalloc>
    130e:	bd08      	pop	{r3, pc}
    1310:	0040034c 	.word	0x0040034c

00001314 <sark_xfree>:
    1314:	b5f0      	push	{r4, r5, r6, r7, lr}
    1316:	1c06      	adds	r6, r0, #0
    1318:	b085      	sub	sp, #20
    131a:	1c0c      	adds	r4, r1, #0
    131c:	1c15      	adds	r5, r2, #0
    131e:	2900      	cmp	r1, #0
    1320:	d102      	bne.n	1328 <sark_xfree+0x14>
    1322:	2010      	movs	r0, #16
    1324:	f7fe ff02 	bl	12c <rt_error>
    1328:	2301      	movs	r3, #1
    132a:	401d      	ands	r5, r3
    132c:	9501      	str	r5, [sp, #4]
    132e:	d003      	beq.n	1338 <sark_xfree+0x24>
    1330:	2006      	movs	r0, #6
    1332:	f7fe ef4a 	blx	1c8 <sark_lock_get>
    1336:	1c07      	adds	r7, r0, #0
    1338:	1c21      	adds	r1, r4, #0
    133a:	3908      	subs	r1, #8
    133c:	684a      	ldr	r2, [r1, #4]
    133e:	6833      	ldr	r3, [r6, #0]
    1340:	0610      	lsls	r0, r2, #24
    1342:	0e00      	lsrs	r0, r0, #24
    1344:	d008      	beq.n	1358 <sark_xfree+0x44>
    1346:	481a      	ldr	r0, [pc, #104]	; (13b0 <sark_xfree+0x9c>)
    1348:	0412      	lsls	r2, r2, #16
    134a:	6800      	ldr	r0, [r0, #0]
    134c:	9002      	str	r0, [sp, #8]
    134e:	0c12      	lsrs	r2, r2, #16
    1350:	9d02      	ldr	r5, [sp, #8]
    1352:	0092      	lsls	r2, r2, #2
    1354:	2000      	movs	r0, #0
    1356:	5150      	str	r0, [r2, r5]
    1358:	2200      	movs	r2, #0
    135a:	e003      	b.n	1364 <sark_xfree+0x50>
    135c:	4299      	cmp	r1, r3
    135e:	d303      	bcc.n	1368 <sark_xfree+0x54>
    1360:	1c1a      	adds	r2, r3, #0
    1362:	685b      	ldr	r3, [r3, #4]
    1364:	2b00      	cmp	r3, #0
    1366:	d1f9      	bne.n	135c <sark_xfree+0x48>
    1368:	1c20      	adds	r0, r4, #0
    136a:	3808      	subs	r0, #8
    136c:	6043      	str	r3, [r0, #4]
    136e:	2a00      	cmp	r2, #0
    1370:	d001      	beq.n	1376 <sark_xfree+0x62>
    1372:	6051      	str	r1, [r2, #4]
    1374:	e000      	b.n	1378 <sark_xfree+0x64>
    1376:	6031      	str	r1, [r6, #0]
    1378:	2b00      	cmp	r3, #0
    137a:	d006      	beq.n	138a <sark_xfree+0x76>
    137c:	6806      	ldr	r6, [r0, #0]
    137e:	429e      	cmp	r6, r3
    1380:	d103      	bne.n	138a <sark_xfree+0x76>
    1382:	681d      	ldr	r5, [r3, #0]
    1384:	685b      	ldr	r3, [r3, #4]
    1386:	6005      	str	r5, [r0, #0]
    1388:	6043      	str	r3, [r0, #4]
    138a:	2a00      	cmp	r2, #0
    138c:	d006      	beq.n	139c <sark_xfree+0x88>
    138e:	6816      	ldr	r6, [r2, #0]
    1390:	428e      	cmp	r6, r1
    1392:	d103      	bne.n	139c <sark_xfree+0x88>
    1394:	3c08      	subs	r4, #8
    1396:	6820      	ldr	r0, [r4, #0]
    1398:	6864      	ldr	r4, [r4, #4]
    139a:	c211      	stmia	r2!, {r0, r4}
    139c:	9d01      	ldr	r5, [sp, #4]
    139e:	2d00      	cmp	r5, #0
    13a0:	d003      	beq.n	13aa <sark_xfree+0x96>
    13a2:	1c38      	adds	r0, r7, #0
    13a4:	2106      	movs	r1, #6
    13a6:	f7fe ef22 	blx	1ec <sark_lock_free>
    13aa:	b005      	add	sp, #20
    13ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	e5007fdc 	.word	0xe5007fdc

000013b4 <sark_free>:
    13b4:	b508      	push	{r3, lr}
    13b6:	4b03      	ldr	r3, [pc, #12]	; (13c4 <sark_free+0x10>)
    13b8:	1c01      	adds	r1, r0, #0
    13ba:	2200      	movs	r2, #0
    13bc:	6998      	ldr	r0, [r3, #24]
    13be:	f7ff ffa9 	bl	1314 <sark_xfree>
    13c2:	bd08      	pop	{r3, pc}
    13c4:	0040034c 	.word	0x0040034c

000013c8 <sark_heap_init>:
    13c8:	1c03      	adds	r3, r0, #0
    13ca:	330c      	adds	r3, #12
    13cc:	3908      	subs	r1, #8
    13ce:	6043      	str	r3, [r0, #4]
    13d0:	6003      	str	r3, [r0, #0]
    13d2:	2300      	movs	r3, #0
    13d4:	6081      	str	r1, [r0, #8]
    13d6:	60c1      	str	r1, [r0, #12]
    13d8:	6103      	str	r3, [r0, #16]
    13da:	600b      	str	r3, [r1, #0]
    13dc:	604b      	str	r3, [r1, #4]
    13de:	4770      	bx	lr

000013e0 <io_buf_init>:
    13e0:	b538      	push	{r3, r4, r5, lr}
    13e2:	4d0c      	ldr	r5, [pc, #48]	; (1414 <io_buf_init+0x34>)
    13e4:	4b0c      	ldr	r3, [pc, #48]	; (1418 <io_buf_init+0x38>)
    13e6:	6d29      	ldr	r1, [r5, #80]	; 0x50
    13e8:	6818      	ldr	r0, [r3, #0]
    13ea:	3110      	adds	r1, #16
    13ec:	2200      	movs	r2, #0
    13ee:	2301      	movs	r3, #1
    13f0:	f7ff ff20 	bl	1234 <sark_xalloc>
    13f4:	1e04      	subs	r4, r0, #0
    13f6:	d102      	bne.n	13fe <io_buf_init+0x1e>
    13f8:	200e      	movs	r0, #14
    13fa:	f7fe fe97 	bl	12c <rt_error>
    13fe:	69eb      	ldr	r3, [r5, #28]
    1400:	6063      	str	r3, [r4, #4]
    1402:	4a06      	ldr	r2, [pc, #24]	; (141c <io_buf_init+0x3c>)
    1404:	8b2b      	ldrh	r3, [r5, #24]
    1406:	60a3      	str	r3, [r4, #8]
    1408:	2300      	movs	r3, #0
    140a:	1c20      	adds	r0, r4, #0
    140c:	6023      	str	r3, [r4, #0]
    140e:	6013      	str	r3, [r2, #0]
    1410:	60e3      	str	r3, [r4, #12]
    1412:	bd38      	pop	{r3, r4, r5, pc}
    1414:	e5007f00 	.word	0xe5007f00
    1418:	e5007fd0 	.word	0xe5007fd0
    141c:	0040000c 	.word	0x0040000c

00001420 <io_put_char>:
    1420:	b570      	push	{r4, r5, r6, lr}
    1422:	1c0d      	adds	r5, r1, #0
    1424:	2803      	cmp	r0, #3
    1426:	d907      	bls.n	1438 <io_put_char+0x18>
    1428:	4a34      	ldr	r2, [pc, #208]	; (14fc <io_put_char+0xdc>)
    142a:	6813      	ldr	r3, [r2, #0]
    142c:	54c1      	strb	r1, [r0, r3]
    142e:	3301      	adds	r3, #1
    1430:	6013      	str	r3, [r2, #0]
    1432:	2200      	movs	r2, #0
    1434:	54c2      	strb	r2, [r0, r3]
    1436:	e060      	b.n	14fa <io_put_char+0xda>
    1438:	2800      	cmp	r0, #0
    143a:	d13a      	bne.n	14b2 <io_put_char+0x92>
    143c:	4b30      	ldr	r3, [pc, #192]	; (1500 <io_put_char+0xe0>)
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	2b00      	cmp	r3, #0
    1442:	d11d      	bne.n	1480 <io_put_char+0x60>
    1444:	2001      	movs	r0, #1
    1446:	2192      	movs	r1, #146	; 0x92
    1448:	4081      	lsls	r1, r0
    144a:	f7ff ff57 	bl	12fc <sark_alloc>
    144e:	1e04      	subs	r4, r0, #0
    1450:	d102      	bne.n	1458 <io_put_char+0x38>
    1452:	200e      	movs	r0, #14
    1454:	f7fe fe6a 	bl	12c <rt_error>
    1458:	2307      	movs	r3, #7
    145a:	7223      	strb	r3, [r4, #8]
    145c:	2300      	movs	r3, #0
    145e:	7263      	strb	r3, [r4, #9]
    1460:	23ff      	movs	r3, #255	; 0xff
    1462:	72a3      	strb	r3, [r4, #10]
    1464:	4b27      	ldr	r3, [pc, #156]	; (1504 <io_put_char+0xe4>)
    1466:	889a      	ldrh	r2, [r3, #4]
    1468:	81a2      	strh	r2, [r4, #12]
    146a:	4a27      	ldr	r2, [pc, #156]	; (1508 <io_put_char+0xe8>)
    146c:	6812      	ldr	r2, [r2, #0]
    146e:	72e2      	strb	r2, [r4, #11]
    1470:	881b      	ldrh	r3, [r3, #0]
    1472:	81e3      	strh	r3, [r4, #14]
    1474:	2340      	movs	r3, #64	; 0x40
    1476:	8223      	strh	r3, [r4, #16]
    1478:	230c      	movs	r3, #12
    147a:	80a3      	strh	r3, [r4, #4]
    147c:	4b20      	ldr	r3, [pc, #128]	; (1500 <io_put_char+0xe0>)
    147e:	601c      	str	r4, [r3, #0]
    1480:	4b1f      	ldr	r3, [pc, #124]	; (1500 <io_put_char+0xe0>)
    1482:	6818      	ldr	r0, [r3, #0]
    1484:	8883      	ldrh	r3, [r0, #4]
    1486:	18c2      	adds	r2, r0, r3
    1488:	3301      	adds	r3, #1
    148a:	041b      	lsls	r3, r3, #16
    148c:	0c1b      	lsrs	r3, r3, #16
    148e:	7215      	strb	r5, [r2, #8]
    1490:	8083      	strh	r3, [r0, #4]
    1492:	2d00      	cmp	r5, #0
    1494:	d005      	beq.n	14a2 <io_put_char+0x82>
    1496:	2d0a      	cmp	r5, #10
    1498:	d003      	beq.n	14a2 <io_put_char+0x82>
    149a:	2286      	movs	r2, #134	; 0x86
    149c:	0052      	lsls	r2, r2, #1
    149e:	4293      	cmp	r3, r2
    14a0:	d12b      	bne.n	14fa <io_put_char+0xda>
    14a2:	210a      	movs	r1, #10
    14a4:	f7ff fc7e 	bl	da4 <sark_msg_send>
    14a8:	4b15      	ldr	r3, [pc, #84]	; (1500 <io_put_char+0xe0>)
    14aa:	220c      	movs	r2, #12
    14ac:	681b      	ldr	r3, [r3, #0]
    14ae:	809a      	strh	r2, [r3, #4]
    14b0:	e023      	b.n	14fa <io_put_char+0xda>
    14b2:	2802      	cmp	r0, #2
    14b4:	d121      	bne.n	14fa <io_put_char+0xda>
    14b6:	4e15      	ldr	r6, [pc, #84]	; (150c <io_put_char+0xec>)
    14b8:	6833      	ldr	r3, [r6, #0]
    14ba:	2b00      	cmp	r3, #0
    14bc:	d105      	bne.n	14ca <io_put_char+0xaa>
    14be:	4b12      	ldr	r3, [pc, #72]	; (1508 <io_put_char+0xe8>)
    14c0:	69dc      	ldr	r4, [r3, #28]
    14c2:	f7ff ff8d 	bl	13e0 <io_buf_init>
    14c6:	65a0      	str	r0, [r4, #88]	; 0x58
    14c8:	6030      	str	r0, [r6, #0]
    14ca:	4a11      	ldr	r2, [pc, #68]	; (1510 <io_put_char+0xf0>)
    14cc:	6834      	ldr	r4, [r6, #0]
    14ce:	6813      	ldr	r3, [r2, #0]
    14d0:	18e1      	adds	r1, r4, r3
    14d2:	3301      	adds	r3, #1
    14d4:	6013      	str	r3, [r2, #0]
    14d6:	4a0b      	ldr	r2, [pc, #44]	; (1504 <io_put_char+0xe4>)
    14d8:	740d      	strb	r5, [r1, #16]
    14da:	6d12      	ldr	r2, [r2, #80]	; 0x50
    14dc:	4293      	cmp	r3, r2
    14de:	d107      	bne.n	14f0 <io_put_char+0xd0>
    14e0:	60e3      	str	r3, [r4, #12]
    14e2:	f7ff ff7d 	bl	13e0 <io_buf_init>
    14e6:	6833      	ldr	r3, [r6, #0]
    14e8:	6020      	str	r0, [r4, #0]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	6033      	str	r3, [r6, #0]
    14ee:	e004      	b.n	14fa <io_put_char+0xda>
    14f0:	2d00      	cmp	r5, #0
    14f2:	d001      	beq.n	14f8 <io_put_char+0xd8>
    14f4:	2d0a      	cmp	r5, #10
    14f6:	d100      	bne.n	14fa <io_put_char+0xda>
    14f8:	60e3      	str	r3, [r4, #12]
    14fa:	bd70      	pop	{r4, r5, r6, pc}
    14fc:	00400010 	.word	0x00400010
    1500:	00400004 	.word	0x00400004
    1504:	e5007f00 	.word	0xe5007f00
    1508:	0040034c 	.word	0x0040034c
    150c:	00400008 	.word	0x00400008
    1510:	0040000c 	.word	0x0040000c

00001514 <io_put_fixed>:
    1514:	b5f0      	push	{r4, r5, r6, r7, lr}
    1516:	b08d      	sub	sp, #52	; 0x34
    1518:	9001      	str	r0, [sp, #4]
    151a:	1c15      	adds	r5, r2, #0
    151c:	2b0c      	cmp	r3, #12
    151e:	d900      	bls.n	1522 <io_put_fixed+0xe>
    1520:	230c      	movs	r3, #12
    1522:	1c0a      	adds	r2, r1, #0
    1524:	2400      	movs	r4, #0
    1526:	e008      	b.n	153a <io_put_fixed+0x26>
    1528:	0c17      	lsrs	r7, r2, #16
    152a:	3730      	adds	r7, #48	; 0x30
    152c:	46bc      	mov	ip, r7
    152e:	a805      	add	r0, sp, #20
    1530:	3401      	adds	r4, #1
    1532:	18c7      	adds	r7, r0, r3
    1534:	4266      	negs	r6, r4
    1536:	4660      	mov	r0, ip
    1538:	55b8      	strb	r0, [r7, r6]
    153a:	0412      	lsls	r2, r2, #16
    153c:	0c12      	lsrs	r2, r2, #16
    153e:	200a      	movs	r0, #10
    1540:	4342      	muls	r2, r0
    1542:	429c      	cmp	r4, r3
    1544:	d1f0      	bne.n	1528 <io_put_fixed+0x14>
    1546:	0c12      	lsrs	r2, r2, #16
    1548:	2004      	movs	r0, #4
    154a:	4290      	cmp	r0, r2
    154c:	4180      	sbcs	r0, r0
    154e:	2601      	movs	r6, #1
    1550:	4240      	negs	r0, r0
    1552:	2200      	movs	r2, #0
    1554:	46b4      	mov	ip, r6
    1556:	2730      	movs	r7, #48	; 0x30
    1558:	e00a      	b.n	1570 <io_put_fixed+0x5c>
    155a:	a805      	add	r0, sp, #20
    155c:	5c16      	ldrb	r6, [r2, r0]
    155e:	2e38      	cmp	r6, #56	; 0x38
    1560:	d902      	bls.n	1568 <io_put_fixed+0x54>
    1562:	5417      	strb	r7, [r2, r0]
    1564:	2001      	movs	r0, #1
    1566:	e002      	b.n	156e <io_put_fixed+0x5a>
    1568:	3601      	adds	r6, #1
    156a:	5416      	strb	r6, [r2, r0]
    156c:	2000      	movs	r0, #0
    156e:	3201      	adds	r2, #1
    1570:	429a      	cmp	r2, r3
    1572:	d202      	bcs.n	157a <io_put_fixed+0x66>
    1574:	4666      	mov	r6, ip
    1576:	4230      	tst	r0, r6
    1578:	d1ef      	bne.n	155a <io_put_fixed+0x46>
    157a:	2b00      	cmp	r3, #0
    157c:	d003      	beq.n	1586 <io_put_fixed+0x72>
    157e:	242e      	movs	r4, #46	; 0x2e
    1580:	aa05      	add	r2, sp, #20
    1582:	54d4      	strb	r4, [r2, r3]
    1584:	1c5c      	adds	r4, r3, #1
    1586:	0c09      	lsrs	r1, r1, #16
    1588:	1841      	adds	r1, r0, r1
    158a:	a803      	add	r0, sp, #12
    158c:	f7fe eeaa 	blx	2e4 <sark_div10>
    1590:	9a04      	ldr	r2, [sp, #16]
    1592:	9903      	ldr	r1, [sp, #12]
    1594:	ab05      	add	r3, sp, #20
    1596:	3230      	adds	r2, #48	; 0x30
    1598:	54e2      	strb	r2, [r4, r3]
    159a:	1c66      	adds	r6, r4, #1
    159c:	2900      	cmp	r1, #0
    159e:	d001      	beq.n	15a4 <io_put_fixed+0x90>
    15a0:	1c34      	adds	r4, r6, #0
    15a2:	e7f2      	b.n	158a <io_put_fixed+0x76>
    15a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    15a6:	2800      	cmp	r0, #0
    15a8:	d008      	beq.n	15bc <io_put_fixed+0xa8>
    15aa:	222d      	movs	r2, #45	; 0x2d
    15ac:	559a      	strb	r2, [r3, r6]
    15ae:	1ca6      	adds	r6, r4, #2
    15b0:	e004      	b.n	15bc <io_put_fixed+0xa8>
    15b2:	9801      	ldr	r0, [sp, #4]
    15b4:	9912      	ldr	r1, [sp, #72]	; 0x48
    15b6:	f7ff ff33 	bl	1420 <io_put_char>
    15ba:	3d01      	subs	r5, #1
    15bc:	1c73      	adds	r3, r6, #1
    15be:	429d      	cmp	r5, r3
    15c0:	d8f7      	bhi.n	15b2 <io_put_fixed+0x9e>
    15c2:	3e01      	subs	r6, #1
    15c4:	ab05      	add	r3, sp, #20
    15c6:	5cf1      	ldrb	r1, [r6, r3]
    15c8:	9801      	ldr	r0, [sp, #4]
    15ca:	f7ff ff29 	bl	1420 <io_put_char>
    15ce:	2e00      	cmp	r6, #0
    15d0:	d1f7      	bne.n	15c2 <io_put_fixed+0xae>
    15d2:	b00d      	add	sp, #52	; 0x34
    15d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000015d8 <io_printf>:
    15d8:	b40e      	push	{r1, r2, r3}
    15da:	b5f0      	push	{r4, r5, r6, r7, lr}
    15dc:	b08c      	sub	sp, #48	; 0x30
    15de:	1c04      	adds	r4, r0, #0
    15e0:	9d11      	ldr	r5, [sp, #68]	; 0x44
    15e2:	2803      	cmp	r0, #3
    15e4:	d100      	bne.n	15e8 <io_printf+0x10>
    15e6:	e145      	b.n	1874 <io_printf+0x29c>
    15e8:	d903      	bls.n	15f2 <io_printf+0x1a>
    15ea:	4aa5      	ldr	r2, [pc, #660]	; (1880 <io_printf+0x2a8>)
    15ec:	2300      	movs	r3, #0
    15ee:	7003      	strb	r3, [r0, #0]
    15f0:	6013      	str	r3, [r2, #0]
    15f2:	ab12      	add	r3, sp, #72	; 0x48
    15f4:	9305      	str	r3, [sp, #20]
    15f6:	7829      	ldrb	r1, [r5, #0]
    15f8:	2900      	cmp	r1, #0
    15fa:	d100      	bne.n	15fe <io_printf+0x26>
    15fc:	e13a      	b.n	1874 <io_printf+0x29c>
    15fe:	2925      	cmp	r1, #37	; 0x25
    1600:	d001      	beq.n	1606 <io_printf+0x2e>
    1602:	3501      	adds	r5, #1
    1604:	e053      	b.n	16ae <io_printf+0xd6>
    1606:	7869      	ldrb	r1, [r5, #1]
    1608:	3502      	adds	r5, #2
    160a:	2900      	cmp	r1, #0
    160c:	d100      	bne.n	1610 <io_printf+0x38>
    160e:	e131      	b.n	1874 <io_printf+0x29c>
    1610:	2930      	cmp	r1, #48	; 0x30
    1612:	d002      	beq.n	161a <io_printf+0x42>
    1614:	2020      	movs	r0, #32
    1616:	9003      	str	r0, [sp, #12]
    1618:	e000      	b.n	161c <io_printf+0x44>
    161a:	9103      	str	r1, [sp, #12]
    161c:	2600      	movs	r6, #0
    161e:	220a      	movs	r2, #10
    1620:	e007      	b.n	1632 <io_printf+0x5a>
    1622:	4356      	muls	r6, r2
    1624:	1876      	adds	r6, r6, r1
    1626:	7829      	ldrb	r1, [r5, #0]
    1628:	3e30      	subs	r6, #48	; 0x30
    162a:	3501      	adds	r5, #1
    162c:	2900      	cmp	r1, #0
    162e:	d100      	bne.n	1632 <io_printf+0x5a>
    1630:	e120      	b.n	1874 <io_printf+0x29c>
    1632:	1c0b      	adds	r3, r1, #0
    1634:	3b30      	subs	r3, #48	; 0x30
    1636:	2b09      	cmp	r3, #9
    1638:	d9f3      	bls.n	1622 <io_printf+0x4a>
    163a:	1c37      	adds	r7, r6, #0
    163c:	2306      	movs	r3, #6
    163e:	292e      	cmp	r1, #46	; 0x2e
    1640:	d110      	bne.n	1664 <io_printf+0x8c>
    1642:	7829      	ldrb	r1, [r5, #0]
    1644:	2300      	movs	r3, #0
    1646:	3501      	adds	r5, #1
    1648:	200a      	movs	r0, #10
    164a:	e004      	b.n	1656 <io_printf+0x7e>
    164c:	4343      	muls	r3, r0
    164e:	185b      	adds	r3, r3, r1
    1650:	3b30      	subs	r3, #48	; 0x30
    1652:	7829      	ldrb	r1, [r5, #0]
    1654:	3501      	adds	r5, #1
    1656:	1c0a      	adds	r2, r1, #0
    1658:	3a30      	subs	r2, #48	; 0x30
    165a:	2a09      	cmp	r2, #9
    165c:	d9f6      	bls.n	164c <io_printf+0x74>
    165e:	2900      	cmp	r1, #0
    1660:	d100      	bne.n	1664 <io_printf+0x8c>
    1662:	e107      	b.n	1874 <io_printf+0x29c>
    1664:	296b      	cmp	r1, #107	; 0x6b
    1666:	d100      	bne.n	166a <io_printf+0x92>
    1668:	e0b0      	b.n	17cc <io_printf+0x1f4>
    166a:	d80d      	bhi.n	1688 <io_printf+0xb0>
    166c:	2963      	cmp	r1, #99	; 0x63
    166e:	d01a      	beq.n	16a6 <io_printf+0xce>
    1670:	d805      	bhi.n	167e <io_printf+0xa6>
    1672:	294b      	cmp	r1, #75	; 0x4b
    1674:	d100      	bne.n	1678 <io_printf+0xa0>
    1676:	e09a      	b.n	17ae <io_printf+0x1d6>
    1678:	2952      	cmp	r1, #82	; 0x52
    167a:	d118      	bne.n	16ae <io_printf+0xd6>
    167c:	e09e      	b.n	17bc <io_printf+0x1e4>
    167e:	2964      	cmp	r1, #100	; 0x64
    1680:	d036      	beq.n	16f0 <io_printf+0x118>
    1682:	2966      	cmp	r1, #102	; 0x66
    1684:	d113      	bne.n	16ae <io_printf+0xd6>
    1686:	e092      	b.n	17ae <io_printf+0x1d6>
    1688:	2975      	cmp	r1, #117	; 0x75
    168a:	d066      	beq.n	175a <io_printf+0x182>
    168c:	d805      	bhi.n	169a <io_printf+0xc2>
    168e:	2972      	cmp	r1, #114	; 0x72
    1690:	d100      	bne.n	1694 <io_printf+0xbc>
    1692:	e09b      	b.n	17cc <io_printf+0x1f4>
    1694:	2973      	cmp	r1, #115	; 0x73
    1696:	d10a      	bne.n	16ae <io_printf+0xd6>
    1698:	e00d      	b.n	16b6 <io_printf+0xde>
    169a:	2978      	cmp	r1, #120	; 0x78
    169c:	d100      	bne.n	16a0 <io_printf+0xc8>
    169e:	e0a6      	b.n	17ee <io_printf+0x216>
    16a0:	297a      	cmp	r1, #122	; 0x7a
    16a2:	d104      	bne.n	16ae <io_printf+0xd6>
    16a4:	e0ce      	b.n	1844 <io_printf+0x26c>
    16a6:	9b05      	ldr	r3, [sp, #20]
    16a8:	6819      	ldr	r1, [r3, #0]
    16aa:	1d1a      	adds	r2, r3, #4
    16ac:	9205      	str	r2, [sp, #20]
    16ae:	1c20      	adds	r0, r4, #0
    16b0:	f7ff feb6 	bl	1420 <io_put_char>
    16b4:	e79f      	b.n	15f6 <io_printf+0x1e>
    16b6:	9b05      	ldr	r3, [sp, #20]
    16b8:	681e      	ldr	r6, [r3, #0]
    16ba:	1d1a      	adds	r2, r3, #4
    16bc:	1c33      	adds	r3, r6, #0
    16be:	9205      	str	r2, [sp, #20]
    16c0:	781a      	ldrb	r2, [r3, #0]
    16c2:	1b99      	subs	r1, r3, r6
    16c4:	9103      	str	r1, [sp, #12]
    16c6:	3301      	adds	r3, #1
    16c8:	2a00      	cmp	r2, #0
    16ca:	d1f9      	bne.n	16c0 <io_printf+0xe8>
    16cc:	e004      	b.n	16d8 <io_printf+0x100>
    16ce:	1c20      	adds	r0, r4, #0
    16d0:	2120      	movs	r1, #32
    16d2:	f7ff fea5 	bl	1420 <io_put_char>
    16d6:	3f01      	subs	r7, #1
    16d8:	9a03      	ldr	r2, [sp, #12]
    16da:	4297      	cmp	r7, r2
    16dc:	dcf7      	bgt.n	16ce <io_printf+0xf6>
    16de:	e003      	b.n	16e8 <io_printf+0x110>
    16e0:	1c20      	adds	r0, r4, #0
    16e2:	3601      	adds	r6, #1
    16e4:	f7ff fe9c 	bl	1420 <io_put_char>
    16e8:	7831      	ldrb	r1, [r6, #0]
    16ea:	2900      	cmp	r1, #0
    16ec:	d1f8      	bne.n	16e0 <io_printf+0x108>
    16ee:	e782      	b.n	15f6 <io_printf+0x1e>
    16f0:	9b05      	ldr	r3, [sp, #20]
    16f2:	6819      	ldr	r1, [r3, #0]
    16f4:	1d1a      	adds	r2, r3, #4
    16f6:	2300      	movs	r3, #0
    16f8:	9205      	str	r2, [sp, #20]
    16fa:	9303      	str	r3, [sp, #12]
    16fc:	4299      	cmp	r1, r3
    16fe:	da02      	bge.n	1706 <io_printf+0x12e>
    1700:	202d      	movs	r0, #45	; 0x2d
    1702:	4249      	negs	r1, r1
    1704:	9003      	str	r0, [sp, #12]
    1706:	2700      	movs	r7, #0
    1708:	a806      	add	r0, sp, #24
    170a:	f7fe edec 	blx	2e4 <sark_div10>
    170e:	9a07      	ldr	r2, [sp, #28]
    1710:	9906      	ldr	r1, [sp, #24]
    1712:	ab08      	add	r3, sp, #32
    1714:	3230      	adds	r2, #48	; 0x30
    1716:	54fa      	strb	r2, [r7, r3]
    1718:	3701      	adds	r7, #1
    171a:	2900      	cmp	r1, #0
    171c:	d1f4      	bne.n	1708 <io_printf+0x130>
    171e:	e001      	b.n	1724 <io_printf+0x14c>
    1720:	2f00      	cmp	r7, #0
    1722:	d003      	beq.n	172c <io_printf+0x154>
    1724:	3f01      	subs	r7, #1
    1726:	5cfa      	ldrb	r2, [r7, r3]
    1728:	2a30      	cmp	r2, #48	; 0x30
    172a:	d0f9      	beq.n	1720 <io_printf+0x148>
    172c:	9903      	ldr	r1, [sp, #12]
    172e:	2900      	cmp	r1, #0
    1730:	d007      	beq.n	1742 <io_printf+0x16a>
    1732:	3701      	adds	r7, #1
    1734:	55d9      	strb	r1, [r3, r7]
    1736:	e004      	b.n	1742 <io_printf+0x16a>
    1738:	1c20      	adds	r0, r4, #0
    173a:	2120      	movs	r1, #32
    173c:	f7ff fe70 	bl	1420 <io_put_char>
    1740:	3e01      	subs	r6, #1
    1742:	1c7b      	adds	r3, r7, #1
    1744:	429e      	cmp	r6, r3
    1746:	d8f7      	bhi.n	1738 <io_printf+0x160>
    1748:	ab08      	add	r3, sp, #32
    174a:	5cf9      	ldrb	r1, [r7, r3]
    174c:	1c20      	adds	r0, r4, #0
    174e:	3f01      	subs	r7, #1
    1750:	f7ff fe66 	bl	1420 <io_put_char>
    1754:	1c79      	adds	r1, r7, #1
    1756:	d1f7      	bne.n	1748 <io_printf+0x170>
    1758:	e74d      	b.n	15f6 <io_printf+0x1e>
    175a:	9b05      	ldr	r3, [sp, #20]
    175c:	2700      	movs	r7, #0
    175e:	6819      	ldr	r1, [r3, #0]
    1760:	1d1a      	adds	r2, r3, #4
    1762:	9205      	str	r2, [sp, #20]
    1764:	a806      	add	r0, sp, #24
    1766:	f7fe edbe 	blx	2e4 <sark_div10>
    176a:	9a07      	ldr	r2, [sp, #28]
    176c:	9906      	ldr	r1, [sp, #24]
    176e:	3230      	adds	r2, #48	; 0x30
    1770:	ab08      	add	r3, sp, #32
    1772:	54fa      	strb	r2, [r7, r3]
    1774:	3701      	adds	r7, #1
    1776:	2900      	cmp	r1, #0
    1778:	d1f4      	bne.n	1764 <io_printf+0x18c>
    177a:	e001      	b.n	1780 <io_printf+0x1a8>
    177c:	2f00      	cmp	r7, #0
    177e:	d00a      	beq.n	1796 <io_printf+0x1be>
    1780:	3f01      	subs	r7, #1
    1782:	ab08      	add	r3, sp, #32
    1784:	5cfb      	ldrb	r3, [r7, r3]
    1786:	2b30      	cmp	r3, #48	; 0x30
    1788:	d105      	bne.n	1796 <io_printf+0x1be>
    178a:	e7f7      	b.n	177c <io_printf+0x1a4>
    178c:	1c20      	adds	r0, r4, #0
    178e:	9903      	ldr	r1, [sp, #12]
    1790:	f7ff fe46 	bl	1420 <io_put_char>
    1794:	3e01      	subs	r6, #1
    1796:	1c7b      	adds	r3, r7, #1
    1798:	429e      	cmp	r6, r3
    179a:	d8f7      	bhi.n	178c <io_printf+0x1b4>
    179c:	ab08      	add	r3, sp, #32
    179e:	5cf9      	ldrb	r1, [r7, r3]
    17a0:	1c20      	adds	r0, r4, #0
    17a2:	3f01      	subs	r7, #1
    17a4:	f7ff fe3c 	bl	1420 <io_put_char>
    17a8:	1c7a      	adds	r2, r7, #1
    17aa:	d1f7      	bne.n	179c <io_printf+0x1c4>
    17ac:	e723      	b.n	15f6 <io_printf+0x1e>
    17ae:	9a05      	ldr	r2, [sp, #20]
    17b0:	9803      	ldr	r0, [sp, #12]
    17b2:	1d11      	adds	r1, r2, #4
    17b4:	9105      	str	r1, [sp, #20]
    17b6:	6811      	ldr	r1, [r2, #0]
    17b8:	9000      	str	r0, [sp, #0]
    17ba:	e005      	b.n	17c8 <io_printf+0x1f0>
    17bc:	9a05      	ldr	r2, [sp, #20]
    17be:	1d11      	adds	r1, r2, #4
    17c0:	9105      	str	r1, [sp, #20]
    17c2:	6811      	ldr	r1, [r2, #0]
    17c4:	9a03      	ldr	r2, [sp, #12]
    17c6:	9200      	str	r2, [sp, #0]
    17c8:	2200      	movs	r2, #0
    17ca:	e00a      	b.n	17e2 <io_printf+0x20a>
    17cc:	9a05      	ldr	r2, [sp, #20]
    17ce:	1d11      	adds	r1, r2, #4
    17d0:	6812      	ldr	r2, [r2, #0]
    17d2:	9105      	str	r1, [sp, #20]
    17d4:	17d0      	asrs	r0, r2, #31
    17d6:	1811      	adds	r1, r2, r0
    17d8:	4041      	eors	r1, r0
    17da:	0049      	lsls	r1, r1, #1
    17dc:	9803      	ldr	r0, [sp, #12]
    17de:	0fd2      	lsrs	r2, r2, #31
    17e0:	9000      	str	r0, [sp, #0]
    17e2:	9201      	str	r2, [sp, #4]
    17e4:	1c20      	adds	r0, r4, #0
    17e6:	1c32      	adds	r2, r6, #0
    17e8:	f7ff fe94 	bl	1514 <io_put_fixed>
    17ec:	e703      	b.n	15f6 <io_printf+0x1e>
    17ee:	9b05      	ldr	r3, [sp, #20]
    17f0:	210f      	movs	r1, #15
    17f2:	1d1a      	adds	r2, r3, #4
    17f4:	4823      	ldr	r0, [pc, #140]	; (1884 <io_printf+0x2ac>)
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	2700      	movs	r7, #0
    17fa:	468c      	mov	ip, r1
    17fc:	9205      	str	r2, [sp, #20]
    17fe:	4662      	mov	r2, ip
    1800:	401a      	ands	r2, r3
    1802:	5c81      	ldrb	r1, [r0, r2]
    1804:	aa08      	add	r2, sp, #32
    1806:	54b9      	strb	r1, [r7, r2]
    1808:	091b      	lsrs	r3, r3, #4
    180a:	3701      	adds	r7, #1
    180c:	2b00      	cmp	r3, #0
    180e:	d1f6      	bne.n	17fe <io_printf+0x226>
    1810:	e001      	b.n	1816 <io_printf+0x23e>
    1812:	2f00      	cmp	r7, #0
    1814:	d00a      	beq.n	182c <io_printf+0x254>
    1816:	3f01      	subs	r7, #1
    1818:	ab08      	add	r3, sp, #32
    181a:	5cfb      	ldrb	r3, [r7, r3]
    181c:	2b30      	cmp	r3, #48	; 0x30
    181e:	d105      	bne.n	182c <io_printf+0x254>
    1820:	e7f7      	b.n	1812 <io_printf+0x23a>
    1822:	1c20      	adds	r0, r4, #0
    1824:	9903      	ldr	r1, [sp, #12]
    1826:	f7ff fdfb 	bl	1420 <io_put_char>
    182a:	3e01      	subs	r6, #1
    182c:	1c7b      	adds	r3, r7, #1
    182e:	429e      	cmp	r6, r3
    1830:	d8f7      	bhi.n	1822 <io_printf+0x24a>
    1832:	ab08      	add	r3, sp, #32
    1834:	5cf9      	ldrb	r1, [r7, r3]
    1836:	1c20      	adds	r0, r4, #0
    1838:	3f01      	subs	r7, #1
    183a:	f7ff fdf1 	bl	1420 <io_put_char>
    183e:	1c7a      	adds	r2, r7, #1
    1840:	d1f7      	bne.n	1832 <io_printf+0x25a>
    1842:	e6d8      	b.n	15f6 <io_printf+0x1e>
    1844:	9b05      	ldr	r3, [sp, #20]
    1846:	1e77      	subs	r7, r6, #1
    1848:	1d1a      	adds	r2, r3, #4
    184a:	681b      	ldr	r3, [r3, #0]
    184c:	9303      	str	r3, [sp, #12]
    184e:	4b0e      	ldr	r3, [pc, #56]	; (1888 <io_printf+0x2b0>)
    1850:	9205      	str	r2, [sp, #20]
    1852:	18f6      	adds	r6, r6, r3
    1854:	00b6      	lsls	r6, r6, #2
    1856:	e00a      	b.n	186e <io_printf+0x296>
    1858:	9a03      	ldr	r2, [sp, #12]
    185a:	230f      	movs	r3, #15
    185c:	40f2      	lsrs	r2, r6
    185e:	4013      	ands	r3, r2
    1860:	4a08      	ldr	r2, [pc, #32]	; (1884 <io_printf+0x2ac>)
    1862:	1c20      	adds	r0, r4, #0
    1864:	5cd1      	ldrb	r1, [r2, r3]
    1866:	f7ff fddb 	bl	1420 <io_put_char>
    186a:	3f01      	subs	r7, #1
    186c:	3e04      	subs	r6, #4
    186e:	2f00      	cmp	r7, #0
    1870:	daf2      	bge.n	1858 <io_printf+0x280>
    1872:	e6c0      	b.n	15f6 <io_printf+0x1e>
    1874:	b00c      	add	sp, #48	; 0x30
    1876:	bcf0      	pop	{r4, r5, r6, r7}
    1878:	bc08      	pop	{r3}
    187a:	b003      	add	sp, #12
    187c:	4718      	bx	r3
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	00400010 	.word	0x00400010
    1884:	00001e44 	.word	0x00001e44
    1888:	3fffffff 	.word	0x3fffffff

0000188c <spin1_srand>:
    188c:	b508      	push	{r3, lr}
    188e:	f7fe fd19 	bl	2c4 <sark_srand>
    1892:	bd08      	pop	{r3, pc}

00001894 <spin1_rand>:
    1894:	b508      	push	{r3, lr}
    1896:	f7fe ed02 	blx	29c <sark_rand>
    189a:	bd08      	pop	{r3, pc}

0000189c <spin1_delay_us>:
    189c:	b508      	push	{r3, lr}
    189e:	f7fe fd17 	bl	2d0 <sark_delay_us>
    18a2:	bd08      	pop	{r3, pc}

000018a4 <spin1_memcpy>:
    18a4:	b510      	push	{r4, lr}
    18a6:	2300      	movs	r3, #0
    18a8:	e002      	b.n	18b0 <spin1_memcpy+0xc>
    18aa:	5ccc      	ldrb	r4, [r1, r3]
    18ac:	54c4      	strb	r4, [r0, r3]
    18ae:	3301      	adds	r3, #1
    18b0:	4293      	cmp	r3, r2
    18b2:	d1fa      	bne.n	18aa <spin1_memcpy+0x6>
    18b4:	bd10      	pop	{r4, pc}

000018b6 <spin1_malloc>:
    18b6:	b508      	push	{r3, lr}
    18b8:	2101      	movs	r1, #1
    18ba:	f7ff fd1f 	bl	12fc <sark_alloc>
    18be:	bd08      	pop	{r3, pc}

000018c0 <spin1_free>:
    18c0:	b508      	push	{r3, lr}
    18c2:	f7ff fd77 	bl	13b4 <sark_free>
    18c6:	bd08      	pop	{r3, pc}

000018c8 <schedule_sysmode>:
    18c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ca:	4d15      	ldr	r5, [pc, #84]	; (1920 <schedule_sysmode+0x58>)
    18cc:	00c6      	lsls	r6, r0, #3
    18ce:	19ab      	adds	r3, r5, r6
    18d0:	685b      	ldr	r3, [r3, #4]
    18d2:	2b00      	cmp	r3, #0
    18d4:	dc04      	bgt.n	18e0 <schedule_sysmode+0x18>
    18d6:	1c08      	adds	r0, r1, #0
    18d8:	5973      	ldr	r3, [r6, r5]
    18da:	1c11      	adds	r1, r2, #0
    18dc:	4798      	blx	r3
    18de:	e01d      	b.n	191c <schedule_sysmode+0x54>
    18e0:	20c8      	movs	r0, #200	; 0xc8
    18e2:	3b01      	subs	r3, #1
    18e4:	4343      	muls	r3, r0
    18e6:	480f      	ldr	r0, [pc, #60]	; (1924 <schedule_sysmode+0x5c>)
    18e8:	18c3      	adds	r3, r0, r3
    18ea:	685c      	ldr	r4, [r3, #4]
    18ec:	200f      	movs	r0, #15
    18ee:	1c67      	adds	r7, r4, #1
    18f0:	4038      	ands	r0, r7
    18f2:	681f      	ldr	r7, [r3, #0]
    18f4:	42b8      	cmp	r0, r7
    18f6:	d008      	beq.n	190a <schedule_sysmode+0x42>
    18f8:	270c      	movs	r7, #12
    18fa:	437c      	muls	r4, r7
    18fc:	5976      	ldr	r6, [r6, r5]
    18fe:	191c      	adds	r4, r3, r4
    1900:	60a6      	str	r6, [r4, #8]
    1902:	60e1      	str	r1, [r4, #12]
    1904:	6122      	str	r2, [r4, #16]
    1906:	6058      	str	r0, [r3, #4]
    1908:	e008      	b.n	191c <schedule_sysmode+0x54>
    190a:	4b07      	ldr	r3, [pc, #28]	; (1928 <schedule_sysmode+0x60>)
    190c:	2201      	movs	r2, #1
    190e:	6819      	ldr	r1, [r3, #0]
    1910:	430a      	orrs	r2, r1
    1912:	601a      	str	r2, [r3, #0]
    1914:	4b05      	ldr	r3, [pc, #20]	; (192c <schedule_sysmode+0x64>)
    1916:	681a      	ldr	r2, [r3, #0]
    1918:	3201      	adds	r2, #1
    191a:	601a      	str	r2, [r3, #0]
    191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	004005b4 	.word	0x004005b4
    1924:	0040001c 	.word	0x0040001c
    1928:	00400014 	.word	0x00400014
    192c:	00400018 	.word	0x00400018

00001930 <sark_pre_main>:
    1930:	b508      	push	{r3, lr}
    1932:	2006      	movs	r0, #6
    1934:	f7ff f942 	bl	bbc <sark_cpu_state>
    1938:	2201      	movs	r2, #1
    193a:	235b      	movs	r3, #91	; 0x5b
    193c:	701a      	strb	r2, [r3, #0]
    193e:	f7ff f945 	bl	bcc <sark_app_lead>
    1942:	4b04      	ldr	r3, [pc, #16]	; (1954 <sark_pre_main+0x24>)
    1944:	681b      	ldr	r3, [r3, #0]
    1946:	1ac2      	subs	r2, r0, r3
    1948:	4253      	negs	r3, r2
    194a:	415a      	adcs	r2, r3
    194c:	4b02      	ldr	r3, [pc, #8]	; (1958 <sark_pre_main+0x28>)
    194e:	701a      	strb	r2, [r3, #0]
    1950:	bd08      	pop	{r3, pc}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	0040034c 	.word	0x0040034c
    1958:	00400458 	.word	0x00400458

0000195c <sark_post_main>:
    195c:	b508      	push	{r3, lr}
    195e:	200b      	movs	r0, #11
    1960:	f7ff f92c 	bl	bbc <sark_cpu_state>
    1964:	bd08      	pop	{r3, pc}
	...

00001968 <__aeabi_uidiv>:
    1968:	e2512001 	subs	r2, r1, #1
    196c:	012fff1e 	bxeq	lr
    1970:	3a000036 	bcc	1a50 <__aeabi_uidiv+0xe8>
    1974:	e1500001 	cmp	r0, r1
    1978:	9a000022 	bls	1a08 <__aeabi_uidiv+0xa0>
    197c:	e1110002 	tst	r1, r2
    1980:	0a000023 	beq	1a14 <__aeabi_uidiv+0xac>
    1984:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    1988:	01a01181 	lsleq	r1, r1, #3
    198c:	03a03008 	moveq	r3, #8
    1990:	13a03001 	movne	r3, #1
    1994:	e3510201 	cmp	r1, #268435456	; 0x10000000
    1998:	31510000 	cmpcc	r1, r0
    199c:	31a01201 	lslcc	r1, r1, #4
    19a0:	31a03203 	lslcc	r3, r3, #4
    19a4:	3afffffa 	bcc	1994 <__aeabi_uidiv+0x2c>
    19a8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    19ac:	31510000 	cmpcc	r1, r0
    19b0:	31a01081 	lslcc	r1, r1, #1
    19b4:	31a03083 	lslcc	r3, r3, #1
    19b8:	3afffffa 	bcc	19a8 <__aeabi_uidiv+0x40>
    19bc:	e3a02000 	mov	r2, #0
    19c0:	e1500001 	cmp	r0, r1
    19c4:	20400001 	subcs	r0, r0, r1
    19c8:	21822003 	orrcs	r2, r2, r3
    19cc:	e15000a1 	cmp	r0, r1, lsr #1
    19d0:	204000a1 	subcs	r0, r0, r1, lsr #1
    19d4:	218220a3 	orrcs	r2, r2, r3, lsr #1
    19d8:	e1500121 	cmp	r0, r1, lsr #2
    19dc:	20400121 	subcs	r0, r0, r1, lsr #2
    19e0:	21822123 	orrcs	r2, r2, r3, lsr #2
    19e4:	e15001a1 	cmp	r0, r1, lsr #3
    19e8:	204001a1 	subcs	r0, r0, r1, lsr #3
    19ec:	218221a3 	orrcs	r2, r2, r3, lsr #3
    19f0:	e3500000 	cmp	r0, #0
    19f4:	11b03223 	lsrsne	r3, r3, #4
    19f8:	11a01221 	lsrne	r1, r1, #4
    19fc:	1affffef 	bne	19c0 <__aeabi_uidiv+0x58>
    1a00:	e1a00002 	mov	r0, r2
    1a04:	e12fff1e 	bx	lr
    1a08:	03a00001 	moveq	r0, #1
    1a0c:	13a00000 	movne	r0, #0
    1a10:	e12fff1e 	bx	lr
    1a14:	e3510801 	cmp	r1, #65536	; 0x10000
    1a18:	21a01821 	lsrcs	r1, r1, #16
    1a1c:	23a02010 	movcs	r2, #16
    1a20:	33a02000 	movcc	r2, #0
    1a24:	e3510c01 	cmp	r1, #256	; 0x100
    1a28:	21a01421 	lsrcs	r1, r1, #8
    1a2c:	22822008 	addcs	r2, r2, #8
    1a30:	e3510010 	cmp	r1, #16
    1a34:	21a01221 	lsrcs	r1, r1, #4
    1a38:	22822004 	addcs	r2, r2, #4
    1a3c:	e3510004 	cmp	r1, #4
    1a40:	82822003 	addhi	r2, r2, #3
    1a44:	908220a1 	addls	r2, r2, r1, lsr #1
    1a48:	e1a00230 	lsr	r0, r0, r2
    1a4c:	e12fff1e 	bx	lr
    1a50:	e3500000 	cmp	r0, #0
    1a54:	13e00000 	mvnne	r0, #0
    1a58:	ea000007 	b	1a7c <__aeabi_idiv0>

00001a5c <__aeabi_uidivmod>:
    1a5c:	e3510000 	cmp	r1, #0
    1a60:	0afffffa 	beq	1a50 <__aeabi_uidiv+0xe8>
    1a64:	e92d4003 	push	{r0, r1, lr}
    1a68:	ebffffbe 	bl	1968 <__aeabi_uidiv>
    1a6c:	e8bd4006 	pop	{r1, r2, lr}
    1a70:	e0030092 	mul	r3, r2, r0
    1a74:	e0411003 	sub	r1, r1, r3
    1a78:	e12fff1e 	bx	lr

00001a7c <__aeabi_idiv0>:
    1a7c:	e12fff1e 	bx	lr

00001a80 <__spin1_delay_us_from_arm>:
    1a80:	e51ff004 	ldr	pc, [pc, #-4]	; 1a84 <__spin1_delay_us_from_arm+0x4>
    1a84:	0000189d 	.word	0x0000189d

00001a88 <__spin1_rand_from_arm>:
    1a88:	e51ff004 	ldr	pc, [pc, #-4]	; 1a8c <__spin1_rand_from_arm+0x4>
    1a8c:	00001895 	.word	0x00001895

00001a90 <__spin1_srand_from_arm>:
    1a90:	e51ff004 	ldr	pc, [pc, #-4]	; 1a94 <__spin1_srand_from_arm+0x4>
    1a94:	0000188d 	.word	0x0000188d
    1a98:	436a626f 	.word	0x436a626f
    1a9c:	626c6c61 	.word	0x626c6c61
    1aa0:	466b6361 	.word	0x466b6361
    1aa4:	3a636e75 	.word	0x3a636e75
    1aa8:	72727563 	.word	0x72727563
    1aac:	20746e65 	.word	0x20746e65
    1ab0:	6e657665 	.word	0x6e657665
    1ab4:	64252074 	.word	0x64252074
    1ab8:	20736920 	.word	0x20736920
    1abc:	67697274 	.word	0x67697274
    1ac0:	65726567 	.word	0x65726567
    1ac4:	6f000a64 	.word	0x6f000a64
    1ac8:	61436a62 	.word	0x61436a62
    1acc:	61626c6c 	.word	0x61626c6c
    1ad0:	75466b63 	.word	0x75466b63
    1ad4:	6e3a636e 	.word	0x6e3a636e
    1ad8:	74757865 	.word	0x74757865
    1adc:	65766520 	.word	0x65766520
    1ae0:	695f746e 	.word	0x695f746e
    1ae4:	6f635f64 	.word	0x6f635f64
    1ae8:	65746e75 	.word	0x65746e75
    1aec:	73692072 	.word	0x73692072
    1af0:	0a642520 	.word	0x0a642520
    1af4:	6a626f00 	.word	0x6a626f00
    1af8:	6c6c6143 	.word	0x6c6c6143
    1afc:	6b636162 	.word	0x6b636162
    1b00:	636e7546 	.word	0x636e7546
    1b04:	6e61723a 	.word	0x6e61723a
    1b08:	43776f64 	.word	0x43776f64
    1b0c:	69666e6f 	.word	0x69666e6f
    1b10:	64252067 	.word	0x64252067
    1b14:	7665000a 	.word	0x7665000a
    1b18:	31746e65 	.word	0x31746e65
    1b1c:	6464413a 	.word	0x6464413a
    1b20:	73736572 	.word	0x73736572
    1b24:	0a782520 	.word	0x0a782520
    1b28:	65766500 	.word	0x65766500
    1b2c:	3a31746e 	.word	0x3a31746e
    1b30:	25206449 	.word	0x25206449
    1b34:	6f000a64 	.word	0x6f000a64
    1b38:	63656a62 	.word	0x63656a62
    1b3c:	413a3174 	.word	0x413a3174
    1b40:	65726464 	.word	0x65726464
    1b44:	25207373 	.word	0x25207373
    1b48:	6f000a78 	.word	0x6f000a78
    1b4c:	63656a62 	.word	0x63656a62
    1b50:	493a3174 	.word	0x493a3174
    1b54:	64252064 	.word	0x64252064
    1b58:	6172000a 	.word	0x6172000a
    1b5c:	6d6f646e 	.word	0x6d6f646e
    1b60:	6d756e20 	.word	0x6d756e20
    1b64:	20726562 	.word	0x20726562
    1b68:	74736574 	.word	0x74736574
    1b6c:	255b203a 	.word	0x255b203a
    1b70:	000a5d64 	.word	0x000a5d64
    1b74:	74736554 	.word	0x74736554
    1b78:	20736920 	.word	0x20736920
    1b7c:	696e6966 	.word	0x696e6966
    1b80:	64656873 	.word	0x64656873
    1b84:	0000000a 	.word	0x0000000a

00001b88 <build_name>:
    1b88:	6d6f682f 6d6a2f65 6f616971 0065442f     /home/jmqiao/De.

00001b98 <build_date>:
    1b98:	5519c470 6f6d654d 61207972 636f6c6c     p..UMemory alloc
    1ba8:	6f697461 6166206e 64656c69 7254000a     ation failed..Tr
    1bb8:	676e6979 206f7420 65657266 4c554e20     ying to free NUL
    1bc8:	656d204c 726f6d6d 74000a79 6c61746f     L memmory..total
    1bd8:	756d6953 6974616c 65506e6f 646f6972     SimulationPeriod
    1be8:	20736920 642c6425 64697669 65722065      is %d,divide re
    1bf8:	746c7573 20736920 702c6425 656d6954     sult is %d,pTime
    1c08:	65736162 74746553 2d676e69 6d69733e     baseSetting->sim
    1c18:	636f4c43 6369546b 7369206b 0a642520     CLockTick is %d.
    1c28:	636e4900 6572726f 70207463 6d617261     .Incorrect param
    1c38:	72657465 000a2173 706d7544 456a624f     eters!..DumpObjE
    1c48:	656d656c 3a73746e 74706d45 75512079     lements:Empty Qu
    1c58:	0a657565 6d754400 6a624f70 6d656c45     eue..DumpObjElem
    1c68:	73746e65 7275433a 746e6572 6a624f20     ents:Current Obj
    1c78:	20746365 25204449 45000a64 524f5252     ect ID %d..ERROR
    1c88:	7261503a 74656d61 20737265 20657261     :Parameters are 
    1c98:	61766e69 0a64696c 52524500 553a524f     invalid..ERROR:U
    1ca8:	6c62616e 6f742065 68635320 75646465     nable to Scheddu
    1cb8:	7420656c 45206568 746e6576 7561433a     le the Event:Cau
    1cc8:	30206573 000a3078 4f525245 69743a52     se 0x0..ERROR:ti
    1cd8:	754f656d 6f6c6374 69546b63 25206b63     meOutclockTick %
    1ce8:	45000a64 524f5252 6d69733a 74616c75     d..ERROR:simulat
    1cf8:	546e6f69 6c61746f 6b636954 0a642520     ionTotalTick %d.
    1d08:	6a626f00 65686353 656c7564 6e754672     .objSchedulerFun
    1d18:	626f3a63 7463656a 20642520 67697274     c:object %d trig
    1d28:	65726567 6f000a64 63536a62 75646568     gered..objSchedu
    1d38:	4672656c 3a636e75 53746547 69546d69     lerFunc:GetSimTi
    1d48:	6162656d 69546573 29286b63 20736920     mebaseTick() is 
    1d58:	000a6425 536a626f 64656863 72656c75     %d..objScheduler
    1d68:	636e7546 6d69743a 74754f65 636f6c43     Func:timeOutCloc
    1d78:	6369546b 6425206b 6f44000a 746f6e20     kTick %d..Do not
    1d88:	68637320 6c756465 68742065 65207369      schedule this e
    1d98:	746e6576 2c642520 73756163 75523a65     vent %d,cause:Ru
    1da8:	6f6c206e 7265676e 61687420 6f74206e     n longer than to
    1db8:	206c6174 756d6973 6974616c 74206e6f     tal simulation t
    1dc8:	0a656d69 6e755200 63736944 65746572     ime..RunDiscrete
    1dd8:	6e657645 6d695374 74616c75 4c6e6f69     EventSimulationL
    1de8:	3a706f6f 53746547 65747379 6f6c436d     oop:GetSystemClo
    1df8:	29286b63 2c642520 65764570 3e2d746e     ck() %d,pEvent->
    1e08:	656d6974 4374754f 6b636f6c 6b636954     timeOutClockTick
    1e18:	2c642520 61746f54 6973206c 616c756d      %d,Total simula
    1e28:	6e6f6974 6b636954 0a642520 52415300     tionTick %d..SAR
    1e38:	70532f4b 614e4e69 0072656b              K/SpiNNaker.

00001e44 <hex>:
    1e44:	33323130 37363534 62613938 66656463     0123456789abcdef
	...
